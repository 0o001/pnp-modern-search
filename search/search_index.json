{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PnP Modern Search solution \u00b6 Solution overview \u00b6 Current version \u00b6 Get the latest release at our releases page . Summary \u00b6 This solution allows you to build user friendly SharePoint search experiences using SPFx in the modern interface. The main features include: Fully customizable SharePoint search query like the good old Content Search Web Part. Can either use a static query or be connected to a search box component using SPFx dynamic data. Live templating system with Handlebar to meet your requirements in terms of UI + built-in layouts. Can also use template from an external file. Search results including previews for Office documents and Office 365 videos. Customizable refiners supporting multilingual values for taxonomy based filters. Sortable results (unique field). Refiners Web Part. SharePoint best bets support. Search query enhancement with NLP tools (like Microsoft LUIS). Extensibility model allowing to write your own components. A complete 1 hour tutorial video is available on the official SharePoint Developer blog : What's included? \u00b6 Search Web Parts \u00b6 SPFx solution search-parts including a complete set of SharePoint search Web Parts like a search results, search box, etc. See documentation . Search extensibility library \u00b6 A SPFx library component project search-extensibility-library allowing to create custom React components wrapped as web components to be included in the search results Web Part Handlebars templates when you require complex dynamic behavior at a granular component level. See documentation . Search custom renderer \u00b6 A SPFx application customizer project search-custom-renderer allowing to completly override the results display using an unique React component. See documentation . Search query enhancer \u00b6 A sample Azure function project search-query-enhancer to demonstrate the use of Microsoft LUIS and other cognitive services to interpret user intents and enhance the search box query accordingly. See documentation . Applies to \u00b6 SharePoint Framework Office 365 tenant Important notice on upgrading the solution from pre v2.2.0.0 \u00b6 Due to code restructuring we have hit an edge case which impacts upgrades from previous versions. To solve the issue go to https://<tenant>.sharepoint.com/sites/<appcatalog>/Lists/ComponentManifests and remove the entries for SearchBox and Search Results, and then upload the .sppkg for the new release. Next you need to loop over all sites which have the web parts installed, and upgrade the App on those sites. Now the web parts should work on new and existing sites. You may use the PnP command Update-PnPApp to update the application. If you have deployed the solution as a tenant wide extension, this should not impact you. Important notice on upgrading the solution from pre v3.0.0.0 \u00b6 Because this version introduces a new standalone search filters Web Part, you will have to reconfigure all previous refiners from the search results Web Part to this new Web Part. You can get the previous layout for filters by selecting the 'Panel' layout in the new Web Part property pane. Disclaimer \u00b6 THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.","title":"Home"},{"location":"#pnp-modern-search-solution","text":"","title":"PnP Modern Search solution"},{"location":"#solution-overview","text":"","title":"Solution overview"},{"location":"#current-version","text":"Get the latest release at our releases page .","title":"Current version"},{"location":"#summary","text":"This solution allows you to build user friendly SharePoint search experiences using SPFx in the modern interface. The main features include: Fully customizable SharePoint search query like the good old Content Search Web Part. Can either use a static query or be connected to a search box component using SPFx dynamic data. Live templating system with Handlebar to meet your requirements in terms of UI + built-in layouts. Can also use template from an external file. Search results including previews for Office documents and Office 365 videos. Customizable refiners supporting multilingual values for taxonomy based filters. Sortable results (unique field). Refiners Web Part. SharePoint best bets support. Search query enhancement with NLP tools (like Microsoft LUIS). Extensibility model allowing to write your own components. A complete 1 hour tutorial video is available on the official SharePoint Developer blog :","title":"Summary"},{"location":"#whats-included","text":"","title":"What's included?"},{"location":"#search-web-parts","text":"SPFx solution search-parts including a complete set of SharePoint search Web Parts like a search results, search box, etc. See documentation .","title":"Search Web Parts"},{"location":"#search-extensibility-library","text":"A SPFx library component project search-extensibility-library allowing to create custom React components wrapped as web components to be included in the search results Web Part Handlebars templates when you require complex dynamic behavior at a granular component level. See documentation .","title":"Search extensibility library"},{"location":"#search-custom-renderer","text":"A SPFx application customizer project search-custom-renderer allowing to completly override the results display using an unique React component. See documentation .","title":"Search custom renderer"},{"location":"#search-query-enhancer","text":"A sample Azure function project search-query-enhancer to demonstrate the use of Microsoft LUIS and other cognitive services to interpret user intents and enhance the search box query accordingly. See documentation .","title":"Search query enhancer"},{"location":"#applies-to","text":"SharePoint Framework Office 365 tenant","title":"Applies to"},{"location":"#important-notice-on-upgrading-the-solution-from-pre-v2200","text":"Due to code restructuring we have hit an edge case which impacts upgrades from previous versions. To solve the issue go to https://<tenant>.sharepoint.com/sites/<appcatalog>/Lists/ComponentManifests and remove the entries for SearchBox and Search Results, and then upload the .sppkg for the new release. Next you need to loop over all sites which have the web parts installed, and upgrade the App on those sites. Now the web parts should work on new and existing sites. You may use the PnP command Update-PnPApp to update the application. If you have deployed the solution as a tenant wide extension, this should not impact you.","title":"Important notice on upgrading the solution from pre v2.2.0.0"},{"location":"#important-notice-on-upgrading-the-solution-from-pre-v3000","text":"Because this version introduces a new standalone search filters Web Part, you will have to reconfigure all previous refiners from the search results Web Part to this new Web Part. You can get the previous layout for filters by selecting the 'Panel' layout in the new Web Part property pane.","title":"Important notice on upgrading the solution from pre v3.0.0.0"},{"location":"#disclaimer","text":"THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.","title":"Disclaimer"},{"location":"build-the-doc/","text":"Building the Documentation \u00b6 Building the documentation locally can help you visualize change you are making to the docs. What you see locally should be what you see online. Building \u00b6 Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable . When executing the pip module on Windows you can prefix it with python -m . For example: python -m pip install mkdocs-material Install MkDocs pip install mkdocs Install the Material theme pip install mkdocs-material Serve it up mkdocs serve Open a browser to http://127.0.0.1:8000/","title":"Building documentation"},{"location":"build-the-doc/#building-the-documentation","text":"Building the documentation locally can help you visualize change you are making to the docs. What you see locally should be what you see online.","title":"Building the Documentation"},{"location":"build-the-doc/#building","text":"Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable . When executing the pip module on Windows you can prefix it with python -m . For example: python -m pip install mkdocs-material Install MkDocs pip install mkdocs Install the Material theme pip install mkdocs-material Serve it up mkdocs serve Open a browser to http://127.0.0.1:8000/","title":"Building"},{"location":"contributors/","text":"This solution won't be here without the volunteer work of these people. Feel free to support them if you like the solution! Franck Cornu (aequos) - @FranckCornu - GitHub Sponsor Page Mikael Svenson (Microsoft) - @mikaelsvenson Yannick Reekmans - @yannickreekmans Albert-Jan Schot - @appieschot Tarald G\u00e5sbakk (PuzzlePart) - @taraldgasbakk Brad Schlintz (Microsoft) - @bschlintz Richard Gigan - @PooLP","title":"Contributors"},{"location":"version/","text":"Since version 3.7, this solution follows a monthly release cycle meaning a new version is always available at the end of the month. Version Date Comments 1.0 Oct 17, 2017 Initial release 1.1 Jan 03, 2018 Improvements and updating to SPFx drop 1.4 1.2 Feb 12, 2018 Added a search box Web Part + Added a \"Result Source Id\" and \"Enable Query Rules\" parameters. 1.3 Apr1, 2018 Added the result count + entered keywords option 1.4 May 10, 2018 Added the query suggestions feature to the search box Web Part Added the automatic translation for taxonomy filter values according to the current site locale. Added the option in the search box Web Part to send the query to an other page 1.5 Jul 2, 2018 Added a templating feature for search results with Handlebars inspired by the react-content-query-webpart sample. Upgraded to 1.5.1-plusbeta to use the new SPFx dynamic data feature instead of event aggregator for Web Parts communication. Code refactoring and reorganization. 2.0.0.5 Sept 18, 2018 Upgraded to 1.6.0-plusbeta. Added dynamic loading of parts needed in edit mode to reduce web part footprint. Added configuration to sort. Added option to set web part title. Added result count tokens. Added toggle to load/use handlebars helpers/moment. 2.1.0.0 Oct 14, 2018 Bug fixes ( #641 , #642 ) Added document and Office 365 videos previews for the list template. Added SharePoint best bets support. 2.1.1.0 Oct 30, 2018 Bug fix for editing custom template. Bug fix for dynamic loading of video helper library. Added support for Page context query variables. Added getUniqueCount helper function. 2.1.2.0 Nov 9, 2018 Bug fix for IE11. Added date query variables. Added support for both result source id and query template. Added getUniqueCount helper function. 2.2.0.0 Nov 11, 2018 Upgraded to SPFx 1.7.0 Added a TypeScript Azure Function to demonstrate NLP processing on search query Removed extension data source. Now we use the default SPFx 'Page Environment' data source. 2.2.0.1 Dec 3, 2018 Remove switch for handlebar helpers, and instead load helpers if used in the template. 2.3.0.0 Dec 13, 2018 Upgraded to @pnp/controls 1.13.0 Added a result types features Fix bug regarding dynamic data source connection 2.4.0.0 Jan 03, 2019 Added custom code renderer support. 2.4.0.1 Jan 07, 2019 Added backwards compatibility for older sort configurations, and old empty refiner configurations 2.5.0.1 Feb 11, 2019 Downgrade @microsoft/sp-office-ui-fabric-core to v1.6.0 to fix theming 2.5.1.0 Mar 05, 2019 Added Search Navigation webpart to the package. 3.0.0.0 Mar 10, 2019 Created a dedicated refiners Web Part to connect with a search results like to the classic SharePoint search experience. 3.0.1.0 Mar 14, 2019 Created a dedicated pagination Web Part to connect with a search results like to the classic SharePoint search experience. Improved Refiners WP CSS. 3.0.2.0 Mar 14, 2019 Fixed regressions with the paging experience 3.0.3.0 Mar 16, 2019 Fixed display of custom renderers, in edit mode 3.0.4.0 Mar 21, 2019 Fixed loading of Handlebars helpers when having multiple search parts on a page 3.0.5.0 Mar 26, 2019 Fixed recreating SearchService on each render 3.1.0.0 Mar 30, 2019 Added date range and multi value refiner templates 3.2.0.0 Apr 08, 2019 Added support for QueryString token 3.3.0.0 Apr 20, 2019 Added search verticals Web Part allowing to search within predefined scopes using query template and result source. 3.4.0.0 May 23, 2019 Added placeholders HTML markup by template instead of global. 3.5.0.0 July 8th, 2019 Fixes: Taxonomy tags, web part header, theme colors, search box clearing, loading of handlebars helpers. Added Spanish locale. Optimized CSS references (may break in custom templates if you used some of the OUIF styles). Optimized bundle size for run-time. Added more options for time zone handling with getDate . 3.6.2.0 Aug 13th, 2019 Does not work with IE11 (looking into it) Removed the deprecated 'office-ui-fabric' module and updated layouts with the Office UI React components by wrapping them with web components. Added a DetailsList and Debug layouts + template options for 'Tiles' (placeholders fileds, etc.) and 'Details List' (column builder, etc.). Updated property pane fields (Search Results and Refiners WP) to use a dynamic search managed properties list instead of text values. Added regEx and getUnique helpers. Added Dutch translation. 3.6.3.0 Aug 14th, 2019 Now works in IE11, just ignore the errors :) 3.7.0.0 Oct 30th, 2019 Allow selecting between URL Fragment or QueryString parameter. Refiner flashing fix. Fixed Page token handling. Added more handlebar helper methods. Removed default path filter on the webpart. Added sorting option for refiners. Better default icon handling and support for using OUIFR icons in your templates. See templating documentation for more information. Added support for rendering secondary result blocks in custom renderers. Added toggle to include OneDrive results as a secondary result block (not currently visible without custom renderer). Allow custom renderers to render even if there are zero search results to display. Added fixed date refiner template. Fix for using custom code renderer. Upgraded to SPFx v1.9.1. Added preview support for 'spellingSuggestion' token. > 3.7 After this release, refer directly to the GitHub repository","title":"Versions"},{"location":"search-custom-renderer/getting-started/","text":"Summary \u00b6 This sample is an example on how to use custom code renderers in the react-search-refiners project. Custom code renderers lets you render the search results from a react-search-refiners webpart in your own way, with whatever tools you prefer. Typically, you will use SPFx Application Customizers to mount these renderers, but you may also use SPFx webparts. This sample contains a SPFx Application Customizer which uses React and Office-UI-Fabric-React to render the search results. This package contains two separate renderers: a basic renderer and a persona renderer for rendering searches after people. Used SharePoint Framework Version \u00b6 Applies to \u00b6 SharePoint Framework Office 365 tenant React Search Refiners Solution \u00b6 Solution Author(s) react-search-refiners-renderers Tarald G\u00e5sbakk - @taraldga Version history \u00b6 Version Date Comments 1.0.0 Jan 06, 2019 Initial release 1.0.0 Mar 05, 2019 Added Persona renderer 1.0.1 Mar 16, 2019 Fixed hardcoded profile image url in Persona renderer. Updated some files to be in sync with Search solution Minimal Path to Awesome \u00b6 Follow the Minimal Path to Awesome for React Search Refiners . In this repository, run from the command line: npm install gulp serve Creating your own renderers \u00b6 The renderer bundled in this sample is a simple renderer designed to show how a simple implementation of a code renderer would look like. Following is a quick tour of the setup-process and the different settings you will encounter when creating your own renderer. Registering a new renderer \u00b6 The renderers work by announcing themselves to any react-search-refiners webparts that exists on the pages they are installed on. The registration process is handled by the 'registerRenderer'- function in the 'ResultService' - class in './src/services'. A typical registration will take place onInit. The parameters of the registerRenderer function: rendererId : The id of the current renderer. Used to identify which renderer the user has selected. Typically 'this.componentId'. rendererName : The displayName of the renderer in the react-search-refiners webpart property panel. rendererIcon : The office-ui-fabric-react icon that should be displayed in the property pane of the webpart. callback : The callback function that is used to render the webpart. This will be called when the renderer is selected and new data is available. customFields : Optional names of custom fields that may be used for templating in the renderer. Templating \u00b6 By registering a field-name in the 'customFields' value, you may expose them to the user, letting them choose which fields should be displayed in different places in your renderer. In the bundled example, a subheader is passed along as a template field. The dropdown selection that the user can chose elements from are the elements selected for fetching by the search webpart. Using the Persona renderer \u00b6 In order to make the persona-renderer work as is when installing the ready-made package, you need to fetch the following properties: PreferredName,WorkEmail,WorkPhone,JobTitle,OfficeNumber,Title,PictureURL,FirstName,LastName,userName,Path","title":"Getting Started"},{"location":"search-custom-renderer/getting-started/#summary","text":"This sample is an example on how to use custom code renderers in the react-search-refiners project. Custom code renderers lets you render the search results from a react-search-refiners webpart in your own way, with whatever tools you prefer. Typically, you will use SPFx Application Customizers to mount these renderers, but you may also use SPFx webparts. This sample contains a SPFx Application Customizer which uses React and Office-UI-Fabric-React to render the search results. This package contains two separate renderers: a basic renderer and a persona renderer for rendering searches after people.","title":"Summary"},{"location":"search-custom-renderer/getting-started/#used-sharepoint-framework-version","text":"","title":"Used SharePoint Framework Version"},{"location":"search-custom-renderer/getting-started/#applies-to","text":"SharePoint Framework Office 365 tenant React Search Refiners","title":"Applies to"},{"location":"search-custom-renderer/getting-started/#solution","text":"Solution Author(s) react-search-refiners-renderers Tarald G\u00e5sbakk - @taraldga","title":"Solution"},{"location":"search-custom-renderer/getting-started/#version-history","text":"Version Date Comments 1.0.0 Jan 06, 2019 Initial release 1.0.0 Mar 05, 2019 Added Persona renderer 1.0.1 Mar 16, 2019 Fixed hardcoded profile image url in Persona renderer. Updated some files to be in sync with Search solution","title":"Version history"},{"location":"search-custom-renderer/getting-started/#minimal-path-to-awesome","text":"Follow the Minimal Path to Awesome for React Search Refiners . In this repository, run from the command line: npm install gulp serve","title":"Minimal Path to Awesome"},{"location":"search-custom-renderer/getting-started/#creating-your-own-renderers","text":"The renderer bundled in this sample is a simple renderer designed to show how a simple implementation of a code renderer would look like. Following is a quick tour of the setup-process and the different settings you will encounter when creating your own renderer.","title":"Creating your own renderers"},{"location":"search-custom-renderer/getting-started/#registering-a-new-renderer","text":"The renderers work by announcing themselves to any react-search-refiners webparts that exists on the pages they are installed on. The registration process is handled by the 'registerRenderer'- function in the 'ResultService' - class in './src/services'. A typical registration will take place onInit. The parameters of the registerRenderer function: rendererId : The id of the current renderer. Used to identify which renderer the user has selected. Typically 'this.componentId'. rendererName : The displayName of the renderer in the react-search-refiners webpart property panel. rendererIcon : The office-ui-fabric-react icon that should be displayed in the property pane of the webpart. callback : The callback function that is used to render the webpart. This will be called when the renderer is selected and new data is available. customFields : Optional names of custom fields that may be used for templating in the renderer.","title":"Registering a new renderer"},{"location":"search-custom-renderer/getting-started/#templating","text":"By registering a field-name in the 'customFields' value, you may expose them to the user, letting them choose which fields should be displayed in different places in your renderer. In the bundled example, a subheader is passed along as a template field. The dropdown selection that the user can chose elements from are the elements selected for fetching by the search webpart.","title":"Templating"},{"location":"search-custom-renderer/getting-started/#using-the-persona-renderer","text":"In order to make the persona-renderer work as is when installing the ready-made package, you need to fetch the following properties: PreferredName,WorkEmail,WorkPhone,JobTitle,OfficeNumber,Title,PictureURL,FirstName,LastName,userName,Path","title":"Using the Persona renderer"},{"location":"search-extensibility-library/getting-started/","text":"Summary \u00b6 This solution allows you to create and register your own React component (wrapped as HTML web components) to be used in the search results Web Part Handlebars templates. View the sample project here . Used SharePoint Framework Version \u00b6 Prerequisites \u00b6 The custom web components are defined in a SharePoint Framework project of type 'Library Component' . You have the choice to update the demo one or start from scratch with a new project. In this case, in the <your_library_name>.manifest.json file, make sure the id property id is 2501f2fd-d601-4da4-a04d-9f0bd85b1f54 . This identifier is used to load dynamically the library from the Search Results Web Part. Therefore, this value is mandatory to make the link. That is the only hook we need on our side. { // The value should be this id to make the link with the Web Part \"id\": \"2501f2fd-d601-4da4-a04d-9f0bd85b1f54\" / \"alias\": \"MyCompanyLibraryLibrary\", \"componentType\": \"Library\", ... } Create a custom web component \u00b6 A web component is a custom HTML element that can be used in your templates to implement complex behaviors. We used them here as \"wrappers\" for React components to be able to use them with Handlebars. In this solution, web components are considered stateless , meaning they will be entirely recreated when an attribute is changed (coming from the property pane). It means you can still use an inner state in your React components but not rely on the parent context (props) since it will be recreated every time by the Handlebars template. To create a custom component, follow this procedure: Create a new JSX file that will be used for your layout. (ex: CustomComponent.tsx ). You can create it anywhere in your project. Implement your component like a regular React component. import * as React from 'react'; import * as ReactDOM from 'react-dom'; import { BaseWebComponent } from '../models/BaseWebComponent'; export interface IObjectParam { myProperty: string; } export interface ICustomComponentProps { /** * A dummy string param */ myStringParam?: string; /*** * */ myObjectParam?: string; } export interface ICustomComponenState { } export class CustomComponent extends React.Component<ICustomComponentProps, ICustomComponenState> { public render() { let myObject: IObjectParam = { myProperty: undefined }; // Parse custom object try { myObject = JSON.parse(this.props.myObjectParam); } catch (error) { myObject.myProperty = null; } return <div>{this.props.myStringParam} {myObject.myProperty}</div>; } } Because props will be passed from an HTML template, they must to use always a string type. For complex objects, you will need to pass them as 'stringified' then use the JSON.parse() method to use them in your component logic. In the same file, create an other class, this time to define your web component by inheriting the BaseWebComponent abstact class`: export class MyCustomComponentWebComponent extends BaseWebComponent { public constructor() { super(); } public async connectedCallback() { let props = this.resolveAttributes(); const debugView = <CustomComponent {...props}/>; ReactDOM.render(debugView, this); } } The resolveAttributes method will transform custom element HTML attributes to React component props. By convention, web component attributes have to be passed using camel case to be tranformed into React component props. All custom web components must use the prefix data- for attributes (ex: data-my-parameter ) in the html comsumer. However, the data- part won't be included after the resolution by the resolveAttributes method. For instance: a preview-image HTML attribute becomes previewImage prop. In the main entry point class (ex: MyCompanyLibraryLibrary.ts ), extends the IExtensibilityLibrary interface and register your custom components this way: import { MyCustomComponentWebComponent } from \"../CustomComponent\"; import { IComponentDefinition } from \"../../models/IComponentDefinition\"; import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getCustomWebComponents(): IComponentDefinition<any>[] { return [ { componentName: 'my-custom-component', componentClass: MyCustomComponentWebComponent } ]; } } Custom web component tag names must be lowercase with at least one dash separator - (ex: my-custom-component . In a custom Handlebars layout, reference your component like this, leveraging the Handlebars context values: <my-custom-component my-string-param=\"{{MyStringProperty}}\" my-object-param=\"{{JSONstringify MyObjectProperty 2}}\"></my-custom-component> Bundle gulp bundle --ship and package your library gulp package-solution --ship and upload it either in the global or a site app catalog. Create a custom query suggestion provider \u00b6 A query suggestion provider allows you to fetch and display custom content or person suggestions. There is a default provider built-in which retrieves suggestions from SharePoint, however you may add additional providers using the approach outlined. In additional to dynamic suggestions as the user is typing, your provider may also surface \"zero query\" suggestions. These are displayed when the search box has focus without any search text or if the search text is less than 2 characters. To create a custom suggestion provider, follow this procedure: Create a new TypeScript class that implements the BaseSuggestionProvider abstract class. You can create it anywhere in your project. Implement the required methods and properties like the example below. import { BaseSuggestionProvider } from '../models/BaseSuggestionProvider'; import { ISuggestion } from '../models/ISuggestion'; export class CustomSuggestionProvider extends BaseSuggestionProvider { public static readonly ProviderName: string = 'custom-suggestion-provider'; public static readonly ProviderDisplayName: string = 'Custom Suggestion Provider'; public static readonly ProviderDescription: string = 'An example custom suggestion provider.'; public async onInit(): Promise<void> { // initialization logic // this._ctx // <-- SPFx Webpart Context } public get isSuggestionsEnabled(): boolean { return true; } public get isZeroTermSuggestionsEnabled(): boolean { return true; } public async getSuggestions(queryText: string): Promise<ISuggestion[]> { // fetch suggestions } public async getZeroTermSuggestions(): Promise<ISuggestion[]> { // fetch zero term suggestions } } In the main entry point class (ex: MyCompanyLibraryLibrary.ts), register your custom query suggestion provider like the example below. import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; import { ISuggestionProviderDefinition } from \"../../models/ISuggestionProviderDefinition\"; import { CustomSuggestionProvider } from \"../CustomSuggestionProvider\"; ... export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getCustomSuggestionProviders(): ISuggestionProviderDefinition<any>[] { return [ { providerName: CustomSuggestionProvider.ProviderName, providerDisplayName: CustomSuggestionProvider.ProviderDisplayName, providerDescription: CustomSuggestionProvider.ProviderDescription, providerClass: CustomSuggestionProvider }, ]; } } Configure Suggestion Providers \u00b6 When one or more custom query suggestion providers are made available via the extensibility library, an additional configuration pane becomes availabe in the Search Box web part settings. From the panel you can enable or disable individual suggestion providers. Create a custom query modifier \u00b6 A query modifier allows you to manipulate the user's search query before it is sent to SharePoint. You can define multiple query modifiers in the extensibility library. However, only one at a time can be selected in the search results WP depending your requirements. The modifier receives the query text (from search box or the static value specified in the search results WP), query template and result source ID (from search results or search verticals if configured) as parameters. The modifier returns an object with the updated query text and query template. This capability allows you to inject additional terms or criteria to the user's search query such as spelling corrections or translations. You can use the sample Search Query Enhancer function as a starter to use Microsoft Cognitive services to do so. To create a custom query modifier, follow this procedure: Create a new TypeScript class that implements the BaseQueryModifier abstract class. You can create it anywhere in your project. Implement the required methods and properties like the example below. import { BaseQueryModifier } from '../models/BaseQueryModifier'; import { IQueryModifierInput, IQueryModification } from '../models/IQueryModification'; export class CustomQueryModifier extends BaseQueryModifier { public static readonly DisplayName: string = 'Sample Query Modifier'; public static readonly Description: string = 'Adds a filter to the query so that only word documents are returned.'; public async onInit(): Promise<void> { // this._ctx // SPFx Webpart Context } public async modifyQuery(query: IQueryModifierInput): Promise<IQueryModification> { // e.g. Always return docx files const newQueryText = `${query.queryText} fileextension:docx`; // Leave query template unchanged const newQueryTemplate = query.queryTemplate; return { queryText: newQueryText, queryTemplate: newQueryTemplate } as IQueryModification); } } In the main entry point class (ex: MyCompanyLibraryLibrary.ts), register your custom query modifier like the example below. import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; import { IQueryModifierDefinition } from \"../../models/IQueryModifierDefinition\"; import { CustomQueryModifier } from \"../CustomQueryModifier\"; ... export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getQueryModifier(): IQueryModifierDefinition<any> { return { displayName: CustomQueryModifier.DisplayName, description: CustomQueryModifier.Description, class: CustomQueryModifier }; } } Configure Query Modifier \u00b6 When a query modifier is made available via the extensibility library, an additional configuration sections becomes visible in the Search Results web part settings. Here you can select the query modifier to apply to this search box. Only one provider a time can be selected in the search results WP .","title":"Getting started"},{"location":"search-extensibility-library/getting-started/#summary","text":"This solution allows you to create and register your own React component (wrapped as HTML web components) to be used in the search results Web Part Handlebars templates. View the sample project here .","title":"Summary"},{"location":"search-extensibility-library/getting-started/#used-sharepoint-framework-version","text":"","title":"Used SharePoint Framework Version"},{"location":"search-extensibility-library/getting-started/#prerequisites","text":"The custom web components are defined in a SharePoint Framework project of type 'Library Component' . You have the choice to update the demo one or start from scratch with a new project. In this case, in the <your_library_name>.manifest.json file, make sure the id property id is 2501f2fd-d601-4da4-a04d-9f0bd85b1f54 . This identifier is used to load dynamically the library from the Search Results Web Part. Therefore, this value is mandatory to make the link. That is the only hook we need on our side. { // The value should be this id to make the link with the Web Part \"id\": \"2501f2fd-d601-4da4-a04d-9f0bd85b1f54\" / \"alias\": \"MyCompanyLibraryLibrary\", \"componentType\": \"Library\", ... }","title":"Prerequisites"},{"location":"search-extensibility-library/getting-started/#create-a-custom-web-component","text":"A web component is a custom HTML element that can be used in your templates to implement complex behaviors. We used them here as \"wrappers\" for React components to be able to use them with Handlebars. In this solution, web components are considered stateless , meaning they will be entirely recreated when an attribute is changed (coming from the property pane). It means you can still use an inner state in your React components but not rely on the parent context (props) since it will be recreated every time by the Handlebars template. To create a custom component, follow this procedure: Create a new JSX file that will be used for your layout. (ex: CustomComponent.tsx ). You can create it anywhere in your project. Implement your component like a regular React component. import * as React from 'react'; import * as ReactDOM from 'react-dom'; import { BaseWebComponent } from '../models/BaseWebComponent'; export interface IObjectParam { myProperty: string; } export interface ICustomComponentProps { /** * A dummy string param */ myStringParam?: string; /*** * */ myObjectParam?: string; } export interface ICustomComponenState { } export class CustomComponent extends React.Component<ICustomComponentProps, ICustomComponenState> { public render() { let myObject: IObjectParam = { myProperty: undefined }; // Parse custom object try { myObject = JSON.parse(this.props.myObjectParam); } catch (error) { myObject.myProperty = null; } return <div>{this.props.myStringParam} {myObject.myProperty}</div>; } } Because props will be passed from an HTML template, they must to use always a string type. For complex objects, you will need to pass them as 'stringified' then use the JSON.parse() method to use them in your component logic. In the same file, create an other class, this time to define your web component by inheriting the BaseWebComponent abstact class`: export class MyCustomComponentWebComponent extends BaseWebComponent { public constructor() { super(); } public async connectedCallback() { let props = this.resolveAttributes(); const debugView = <CustomComponent {...props}/>; ReactDOM.render(debugView, this); } } The resolveAttributes method will transform custom element HTML attributes to React component props. By convention, web component attributes have to be passed using camel case to be tranformed into React component props. All custom web components must use the prefix data- for attributes (ex: data-my-parameter ) in the html comsumer. However, the data- part won't be included after the resolution by the resolveAttributes method. For instance: a preview-image HTML attribute becomes previewImage prop. In the main entry point class (ex: MyCompanyLibraryLibrary.ts ), extends the IExtensibilityLibrary interface and register your custom components this way: import { MyCustomComponentWebComponent } from \"../CustomComponent\"; import { IComponentDefinition } from \"../../models/IComponentDefinition\"; import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getCustomWebComponents(): IComponentDefinition<any>[] { return [ { componentName: 'my-custom-component', componentClass: MyCustomComponentWebComponent } ]; } } Custom web component tag names must be lowercase with at least one dash separator - (ex: my-custom-component . In a custom Handlebars layout, reference your component like this, leveraging the Handlebars context values: <my-custom-component my-string-param=\"{{MyStringProperty}}\" my-object-param=\"{{JSONstringify MyObjectProperty 2}}\"></my-custom-component> Bundle gulp bundle --ship and package your library gulp package-solution --ship and upload it either in the global or a site app catalog.","title":"Create a custom web component"},{"location":"search-extensibility-library/getting-started/#create-a-custom-query-suggestion-provider","text":"A query suggestion provider allows you to fetch and display custom content or person suggestions. There is a default provider built-in which retrieves suggestions from SharePoint, however you may add additional providers using the approach outlined. In additional to dynamic suggestions as the user is typing, your provider may also surface \"zero query\" suggestions. These are displayed when the search box has focus without any search text or if the search text is less than 2 characters. To create a custom suggestion provider, follow this procedure: Create a new TypeScript class that implements the BaseSuggestionProvider abstract class. You can create it anywhere in your project. Implement the required methods and properties like the example below. import { BaseSuggestionProvider } from '../models/BaseSuggestionProvider'; import { ISuggestion } from '../models/ISuggestion'; export class CustomSuggestionProvider extends BaseSuggestionProvider { public static readonly ProviderName: string = 'custom-suggestion-provider'; public static readonly ProviderDisplayName: string = 'Custom Suggestion Provider'; public static readonly ProviderDescription: string = 'An example custom suggestion provider.'; public async onInit(): Promise<void> { // initialization logic // this._ctx // <-- SPFx Webpart Context } public get isSuggestionsEnabled(): boolean { return true; } public get isZeroTermSuggestionsEnabled(): boolean { return true; } public async getSuggestions(queryText: string): Promise<ISuggestion[]> { // fetch suggestions } public async getZeroTermSuggestions(): Promise<ISuggestion[]> { // fetch zero term suggestions } } In the main entry point class (ex: MyCompanyLibraryLibrary.ts), register your custom query suggestion provider like the example below. import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; import { ISuggestionProviderDefinition } from \"../../models/ISuggestionProviderDefinition\"; import { CustomSuggestionProvider } from \"../CustomSuggestionProvider\"; ... export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getCustomSuggestionProviders(): ISuggestionProviderDefinition<any>[] { return [ { providerName: CustomSuggestionProvider.ProviderName, providerDisplayName: CustomSuggestionProvider.ProviderDisplayName, providerDescription: CustomSuggestionProvider.ProviderDescription, providerClass: CustomSuggestionProvider }, ]; } }","title":"Create a custom query suggestion provider"},{"location":"search-extensibility-library/getting-started/#configure-suggestion-providers","text":"When one or more custom query suggestion providers are made available via the extensibility library, an additional configuration pane becomes availabe in the Search Box web part settings. From the panel you can enable or disable individual suggestion providers.","title":"Configure Suggestion Providers"},{"location":"search-extensibility-library/getting-started/#create-a-custom-query-modifier","text":"A query modifier allows you to manipulate the user's search query before it is sent to SharePoint. You can define multiple query modifiers in the extensibility library. However, only one at a time can be selected in the search results WP depending your requirements. The modifier receives the query text (from search box or the static value specified in the search results WP), query template and result source ID (from search results or search verticals if configured) as parameters. The modifier returns an object with the updated query text and query template. This capability allows you to inject additional terms or criteria to the user's search query such as spelling corrections or translations. You can use the sample Search Query Enhancer function as a starter to use Microsoft Cognitive services to do so. To create a custom query modifier, follow this procedure: Create a new TypeScript class that implements the BaseQueryModifier abstract class. You can create it anywhere in your project. Implement the required methods and properties like the example below. import { BaseQueryModifier } from '../models/BaseQueryModifier'; import { IQueryModifierInput, IQueryModification } from '../models/IQueryModification'; export class CustomQueryModifier extends BaseQueryModifier { public static readonly DisplayName: string = 'Sample Query Modifier'; public static readonly Description: string = 'Adds a filter to the query so that only word documents are returned.'; public async onInit(): Promise<void> { // this._ctx // SPFx Webpart Context } public async modifyQuery(query: IQueryModifierInput): Promise<IQueryModification> { // e.g. Always return docx files const newQueryText = `${query.queryText} fileextension:docx`; // Leave query template unchanged const newQueryTemplate = query.queryTemplate; return { queryText: newQueryText, queryTemplate: newQueryTemplate } as IQueryModification); } } In the main entry point class (ex: MyCompanyLibraryLibrary.ts), register your custom query modifier like the example below. import { IExtensibilityLibrary } from \"../../models/IExtensibilityLibrary\"; import { IQueryModifierDefinition } from \"../../models/IQueryModifierDefinition\"; import { CustomQueryModifier } from \"../CustomQueryModifier\"; ... export class MyCompanyLibraryLibrary implements IExtensibilityLibrary { public getQueryModifier(): IQueryModifierDefinition<any> { return { displayName: CustomQueryModifier.DisplayName, description: CustomQueryModifier.Description, class: CustomQueryModifier }; } }","title":"Create a custom query modifier"},{"location":"search-extensibility-library/getting-started/#configure-query-modifier","text":"When a query modifier is made available via the extensibility library, an additional configuration sections becomes visible in the Search Results web part settings. Here you can select the query modifier to apply to this search box. Only one provider a time can be selected in the search results WP .","title":"Configure Query Modifier"},{"location":"search-parts/getting-started/","text":"Summary \u00b6 This solution contains all search Web Parts you can use on your SharePoint modern pages. Used SharePoint Framework Version \u00b6 This solution includes the following Web Parts: Search Web Part(s) \u00b6 Component Description Search Box Web Part Allows users to enter free text/KQL search queries connected to a search results Web Part. Search Results Web Part Performs static or dynamic search query with customizable parameters sorting and templating. Search Refiners Allows users to configure refiners for a search results Web Part. Search Verticals Allows users to search in predefined scopes. Minimal Path to Awesome \u00b6 Clone this repository In the search-parts project, run the following commands: npm install gulp serve The search-parts project also supports faster development via spfx-fast-serve tool. To use \"fast serve\" run npm run serve instead of gulp serve . We recommend using --nobrowser when serving and use one of two approaches for debugging instead of the local workbench: * Hosted workbench on any site via: https://<tenant>.sharepoint.com/sites/yoursite/_layouts/15/workbench.aspx * Debug on a modern page by appending the below parameters to the URL. This allows page composition and debug as you were in production. ?loadSPFX=true&debugManifestsFile=https://localhost:4321/temp/manifests.js","title":"Getting started"},{"location":"search-parts/getting-started/#summary","text":"This solution contains all search Web Parts you can use on your SharePoint modern pages.","title":"Summary"},{"location":"search-parts/getting-started/#used-sharepoint-framework-version","text":"This solution includes the following Web Parts:","title":"Used SharePoint Framework Version"},{"location":"search-parts/getting-started/#search-web-parts","text":"Component Description Search Box Web Part Allows users to enter free text/KQL search queries connected to a search results Web Part. Search Results Web Part Performs static or dynamic search query with customizable parameters sorting and templating. Search Refiners Allows users to configure refiners for a search results Web Part. Search Verticals Allows users to search in predefined scopes.","title":"Search Web Part(s)"},{"location":"search-parts/getting-started/#minimal-path-to-awesome","text":"Clone this repository In the search-parts project, run the following commands: npm install gulp serve The search-parts project also supports faster development via spfx-fast-serve tool. To use \"fast serve\" run npm run serve instead of gulp serve . We recommend using --nobrowser when serving and use one of two approaches for debugging instead of the local workbench: * Hosted workbench on any site via: https://<tenant>.sharepoint.com/sites/yoursite/_layouts/15/workbench.aspx * Debug on a modern page by appending the below parameters to the URL. This allows page composition and debug as you were in production. ?loadSPFX=true&debugManifestsFile=https://localhost:4321/temp/manifests.js","title":"Minimal Path to Awesome"},{"location":"search-parts/search-box/","text":"Default Search Query Settings \u00b6 Setting Description Use a dynamic data source You can set a default query text coming from am other data source. This case is particularly useful when you want to put a search box Web Part on the front page redirecting to an other page with the same query. Use the query string parameter 'q' from the built-in 'Page Environment' data source. Search box options \u00b6 Setting Description Enable query suggestions The search box supports by default query suggestions from SharePoint search. Refer to the following article to know how to add query suggestions in your SharePoint tenant (caution: it can take up to 24h for changes to take effect). You can also add your own custom suggestions providers using following this procedure . Send the query to a new page Sends the search query text to a new page. On that page, use an other search box Web Part configured with a dynamic data source as the default query. This Web Part uses the URL fragment '#' to pass the entered keywords. Make sure you use this data source property in your targeted components to retrieve the query. Placeholder text The placeholder text to display in the search box. Search query enhancement \u00b6 The search query enhancement feature was removed since the 3.11.0 release. If you need to use such a feature, you must now use the Query Modifier feature and the Search Query Enhancer function","title":"Search Box"},{"location":"search-parts/search-box/#default-search-query-settings","text":"Setting Description Use a dynamic data source You can set a default query text coming from am other data source. This case is particularly useful when you want to put a search box Web Part on the front page redirecting to an other page with the same query. Use the query string parameter 'q' from the built-in 'Page Environment' data source.","title":"Default Search Query Settings"},{"location":"search-parts/search-box/#search-box-options","text":"Setting Description Enable query suggestions The search box supports by default query suggestions from SharePoint search. Refer to the following article to know how to add query suggestions in your SharePoint tenant (caution: it can take up to 24h for changes to take effect). You can also add your own custom suggestions providers using following this procedure . Send the query to a new page Sends the search query text to a new page. On that page, use an other search box Web Part configured with a dynamic data source as the default query. This Web Part uses the URL fragment '#' to pass the entered keywords. Make sure you use this data source property in your targeted components to retrieve the query. Placeholder text The placeholder text to display in the search box.","title":"Search box options"},{"location":"search-parts/search-box/#search-query-enhancement","text":"The search query enhancement feature was removed since the 3.11.0 release. If you need to use such a feature, you must now use the Query Modifier feature and the Search Query Enhancer function","title":"Search query enhancement"},{"location":"search-parts/search-filters/","text":"Refiner Options \u00b6 Setting Description Refiners The search managed properties to use as refiners. Make sure these are refinable. With SharePoint Online, you have to reuse the default ones to do so (RefinableStringXX etc.). The order is the same as they will appear in the refinement panel. You can also provide your own custom labels using the following format RefinableString01:\"You custom filter label\",RefinableString02:\"You custom filter label\",... This Web Part supports dynamic translation of taxonomy based refiners with few additional configurations in the connected search results Web Part (see above). Connect to search results Web Part The search results Web Part to use on the current page to get filters. Styling Options \u00b6 Setting Description Web Part Title Shows a title for this Web Part. Set blank if you don't want a title. Show blank if no result Shows nothing if there is no filter Filters layout Choose the template to use to display filters results. Templates \u00b6 Persona \u00b6 The persona template work with technical account name (ex : i:0#.f|membership|pierre.dupond@tenantsharepoint.onmicrosoft.com). By default, the \"Author\" managed property returns only the display name (ex : \"Pierre Dupont\"). To get the 'Persona' template work with \"Author\", you need to map crawled properties ows_q_USER_Author to a managed properties RefinableStringXX . All crawled properties ows_q_USER_\\<name> and managed properties like People:Manager , People:AccountName ,etc. return technical account name. File Type \u00b6 The \"File Type\" template is intended to work with the FileExtension managed property. Container Tree \u00b6 The _\"Container Tree\" template is intended to work with the ParentLink managed property. Since this one is not refinable by default, you must map the ows_ParentUrl crawled property to a RefinableStringXX managed property. The purpose of this template is to give the ability to navigate trough a folder hierarchy as metadata by parsing the parent link URL segments.","title":"Search Filters"},{"location":"search-parts/search-filters/#refiner-options","text":"Setting Description Refiners The search managed properties to use as refiners. Make sure these are refinable. With SharePoint Online, you have to reuse the default ones to do so (RefinableStringXX etc.). The order is the same as they will appear in the refinement panel. You can also provide your own custom labels using the following format RefinableString01:\"You custom filter label\",RefinableString02:\"You custom filter label\",... This Web Part supports dynamic translation of taxonomy based refiners with few additional configurations in the connected search results Web Part (see above). Connect to search results Web Part The search results Web Part to use on the current page to get filters.","title":"Refiner Options"},{"location":"search-parts/search-filters/#styling-options","text":"Setting Description Web Part Title Shows a title for this Web Part. Set blank if you don't want a title. Show blank if no result Shows nothing if there is no filter Filters layout Choose the template to use to display filters results.","title":"Styling Options"},{"location":"search-parts/search-filters/#templates","text":"","title":"Templates"},{"location":"search-parts/search-filters/#persona","text":"The persona template work with technical account name (ex : i:0#.f|membership|pierre.dupond@tenantsharepoint.onmicrosoft.com). By default, the \"Author\" managed property returns only the display name (ex : \"Pierre Dupont\"). To get the 'Persona' template work with \"Author\", you need to map crawled properties ows_q_USER_Author to a managed properties RefinableStringXX . All crawled properties ows_q_USER_\\<name> and managed properties like People:Manager , People:AccountName ,etc. return technical account name.","title":"Persona"},{"location":"search-parts/search-filters/#file-type","text":"The \"File Type\" template is intended to work with the FileExtension managed property.","title":"File Type"},{"location":"search-parts/search-filters/#container-tree","text":"The _\"Container Tree\" template is intended to work with the ParentLink managed property. Since this one is not refinable by default, you must map the ows_ParentUrl crawled property to a RefinableStringXX managed property. The purpose of this template is to give the ability to navigate trough a folder hierarchy as metadata by parsing the parent link URL segments.","title":"Container Tree"},{"location":"search-parts/search-navigation/","text":"This WebPart has been removed since the 3.11.0 version and replaced by the Search Verticals Web Part","title":"Search Navigation"},{"location":"search-parts/search-pagination/","text":"This WebPart has been removed since the 3.11.0 version. If you had custom templates and need pagination, add the following code snippet in your template : {{#if @root.paging.showPaging}} <pnp-pagination data-total-items=\"{{@root.paging.totalItemsCount}}\" data-hide-first-last-pages=\"{{@root.paging.hideFirstLastPages}}\" data-hide-disabled=\"{{@root.paging.hideDisabled}}\" data-hide-navigation=\"{{@root.paging.hideNavigation}}\" data-range=\"{{@root.paging.pagingRange}}\" data-items-count-per-page=\"{{@root.paging.itemsCountPerPage}}\" data-current-page-number=\"{{@root.paging.currentPageNumber}}\" > </pnp-pagination> {{/if}}","title":"Search Pagination"},{"location":"search-parts/search-results/","text":"Page 1 Page 2 Page 3 Search Query Configuration \u00b6 Setting Description Search query keywords Here you choose to use a static search query or a query coming from a data source. It is recommended to use the associated Web Part coming with this sample. The search query is in KQL format so you can use search query variables (See this post to know which ones are allowed). You can only plug one source to this Web Part. Search Settings \u00b6 Setting Description Query template The search query template in KQL format. You can use search variables here (like Path:{Site}). Result Source Identifier The GUID of a SharePoint result source. Sort order The initial search results sort order, where you can use one or multiple properties to sort by. By default, results are sorted by created date (ascending) and size (descending). Remove these values to reset default sorting Sortable fields The search managed properties to use for sorting. With SharePoint Online, you have to reuse the default ones to do so (RefinableStringXX etc.). The order is the same as they will appear in the sort panel. You can also provide your own custom labels using the following format RefinableString01:\"You custom filter label\",RefinableString02:\"You custom filter label\",... If no sortable fields are provided, the 'Sort' button will not be visible. Connect to a search refiners Web Part If enable, select the search refiners Web Part to use on the current page to get selected filters. It is a 2 ways connection so don't forget to connect the targeted search refiners to the search results Web Part as well. Connect to a search verticals Web Part If enable, select the search verticals Web Part to connect to. Enable Query Rules Enable the query rules if applies. Turn this options 'on' to display your SharePoint Promoted results (links only) and make result blocks available to custom renderers. Include OneDrive results Include OneDrive results if applicable. Turn this option 'on' to make users' personal OneDrive results available to custom renderers. Read more here . Selected properties The search managed properties to retrieve. You can select them from a predefined list or add them as free text if not listed. Then, these properties are available in your Handlebars template with the syntax ( item.property_name or property_name inside the {{#each}} loop). The Web Part needs the following managed properties to get it work ( \"Title,Path,Filename,SiteLogo,PreviewUrl,PictureThumbnailURL,ServerRedirectedPreviewURL,ServerRedirectedURL,HitHighlightedSummary,FileType,ServerRedirectedEmbedURL,ParentLink,owstaxidmetadataalltagsinfo,SPSiteUrl,SiteTitle,IsContainer,IsListItem,HtmlFileType,SiteId,WebId,UniqueID,OriginalPath,FileExtension,NormSiteID,NormListID,NormUniqueID,Created,contentclass,DefaultEncodingURL,Author,AuthorOWSUSER\" ). It you remove them, they will be re-added automatically on the next page refresh . Refinement filters The default refinement filters to apply to the query. Unlike URL filters params, these won't select the default values in the Search Filters WP if connected. Enable taxonomy values localization for refiners and results If set, the Web Part will try to translate the taxonomy term IDs to their corresponding label according to the curent UI language. Refer to the Taxonomy values dynamic translation section of this page. Language of search request The language to use for the search request. By default the search request will be made using the current UI language. Synonyms Ability to define synonyms for the search querytext. Synonyms can be configured in a two-ways mode. Paging settings \u00b6 Setting Description Show paging Displays or not the paging control at the bottom. Number of items per page Corresponds to the number of search results to retrieve per page. Number of pages to display in range The number of page digits to display in the range. Hide navigation buttons If set, hide the previous and next page buttons. Hide first/last navigation buttons If set, hide the last and first navigation buttons. Hide navigation buttons If set, hide the previous, next, first and last if disabled (i.e. no page available). Styling Options \u00b6 Setting Description Web Part Title Shows a title for this Web Part. Set blank if you don't want a title. Show blank if no result Shows nothing if there is no result. If a WP title is set, this will be hidden as well. Show result count Shows the result count and entered keywords. Result Layouts options Choose the template to use to display search results. Some layouts are defined by default but you can create your own either by clicking on the \"Custom\" tile, or \"Edit template\" from an existing chosen template. In custom mode, you can set an external template. It has to be in the same SharePoint tenant. Behind the scenes, the Office UI React controls are used. Custom code templates will also automatically be displayed here upon registration. See the templating documentation for more information about templating. Result types Allows you to set a custom template at item level according to a specific condition (ex: FileType equals 'pdf'). Miscellaneous: Taxonomy values dynamic translation \u00b6 The search results Web Part supports automatic translation for taxonomy based filters and result metadata according to current site language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn on the 'Localization Enabled' toggle in the search results property pane: When you enable this flag, you can still use the original property value for whatever reason by using the following property format in your Handlebars template: <propertyName> + TaxId (ex: owstaxidmetadataalltagsinfo will contain the translated terms and owstaxidmetadataalltagsinfoTaxId ) will contain the original value of the managed property). Out of the box query variables \u00b6 The following out of the box query variables are supported/tested: Site and site collection properties \u00b6 Query variable Definition {Site} or {Site.URL} URL of the site from where the query was issued. For example, this value can be used to query content of the managed property Path. {Site.ID} GUID of site from where the query was issued. This value corresponds to the value of the managed property SiteID. {Site.LCID} Numeric value of the locale as specified by the Regional Settings in the Site Settings on the Site from where the query was issued. {Site.Locale} Language of the Site from where the query was issued in ll-cc format \u2014 for example, en-us. {Site.\\<property>} Any property from the property bag of the site (SPWeb) from where the query was issued, including custom properties. {SiteCollection} or {SiteCollection.URL} URL of site collection from where the query was issued. For example, this value can be used to query content of the managed property Path. {SiteCollection.ID} GUID of site collection from where the query was issued. {SiteCollection.LCID} Numeric value of the locale as specified by the Regional Settings in the Site Settings on the Site Collection from where the query was issued. {SiteCollection.Locale} Language of the Site Collection from where the query was issued in ll-cc format \u2014 for example, en-us. {SiteCollection.\\<property>} Any property from the property bag of the root site (SPWeb) in the site collection (SPSite) from where the query was issued, including custom properties. URL token and request properties \u00b6 Query variable Definition {URLToken.\\<integer>} A value from the URL of a page. The integer represents the position of the value in the URL as counted from right to left. For example, for the page http://www.contoso/audio/mp3/1010101, the query variable {URLToken.1} will query for the last value in the URL, 1010101. The query variable {URLToken.3} will query for the third last property in the URL, audio. You can query for values up to the ninth last position in a URL. {Request.\\<PropertyName>} A value from the current http request - for example, {Request.Url}. User properties \u00b6 Query variable Definition {User} or {User.Name} Display name of the user who issued the query. For example, this value can be used to query content of the managed property Author. {User.Email} Email address of the user who issued the query. For example, this value can be used to query content of the managed property WorkEmail. {User.PreferredContentLanguage} Language as specified as Preferred Content Language in the profile of the user who issued the query. {User.PreferredDisplayLanguage} Language as specified as Preferred Display Language in the profile of the user who issued the query. {User.\\<property>} Any property from the user profile of the user who issued the query \u2014 for example, SPS-Interests, including custom properties. Other properties \u00b6 Query variable Definition {Today+/- \\<integer value for number of days>} A date calculated by adding/subtracting the specified number of days to/from the date when the query is issued. Date format is YYYY-MM-DD. For example, this value can be used to query content of the managed property LastModifiedTime. {SearchBoxQuery} or {searchTerms} The query value entered into a search box on a page. {CurrentDisplayLanguage} The current display language based on MUI in ll-cc format. {CurrentDisplayLCID} Numeric value of the current display language based on MUI in ll-cc format. Custom query variables \u00b6 The following custom query variables are supported: Query variable Definition {Page.<FieldName>} The value of a field on the page from where the query was issued. For example, if the page from where the query was issued contained a site column named \"ContentOwner,\" specifying {Page.ContentOwner} would allow you to query for the value of \"ContentOwner.\" FieldName is the internal name of the field. When used with taxonomy columns, use {Page.<FieldName>.Label} or {Page.<FieldName>.TermID} {CurrentYear} Todays's date four digits, 2018 {CurrentMonth} Today's month, 1-12 {CurrentDate} Today's date, 1-31 {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber}. {PageContext.<ParameterName>} A value from the legacyPageContext object on the page. For example, if the legacyPageContext object of the current page contains a property \"hubSiteId\": \"166aa115-7ae7-4c21-9e02-9e0c8872be28\", you could obtain the value 166aa115-7ae7-4c21-9e02-9e0c8872be28 by specifying {PageContext.hubSiteId}. The property name is case sensitive! {TenantUrl} URL of the tenant (root site) Use the 'OR' operator \u00b6 To deal with mutli valued properties (like taxonomy multi or choices), you can use the 'OR' operator syntax {|<property><operator><multi_valuesporperty>} . The search query will be expanded like this: ((<property><operator><value_1>) OR (<property><operator><value_2>) OR (<property><operator><value_3>) ...) Examples: Using an user profile multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{User.SPS-Hashtags}} Using a page multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermID}} Using a page multi values choice property: {|RefinableStringXX:{Page.myChoiceMultiColumn}} At any time, you can see the resolved query using the 'Debug' layout an inspecting the queryModification property. Best bets \u00b6 This WP supports SharePoint best bets via SharePoint query rules: Filters deep links \u00b6 You can pre-select refinement filters by using the filters URL query string parameter. They can be used with or without the search filters Web Part but need at least a search results Web Part on the page. The URL parameter format is as follow: ?filters=[{\"n\":\"<property-name>\",\"t\":[\"<condition1>\",\"<condition2>\",...],\"o\":\"<operator>\"}] Where: n : the refiner managed property name (ex: RefinableStringXX ) t : the condition tokens. This must be an array even with a single value. Raw text values and FQL expressions are allowed here. o : the operator to use between condition values (optionnal). Pre-selected filters are only applied at page load . Provided refinement filter values are independant from the search filters Web Part configuration. URL params refinement filters take priority over default refinement filters set in the search results Web Part options. Examples \u00b6 Use free text values ?filters=[{\"n\":\"FileType\",\"t\":[\"docx\"]}] FQL expressions with multiple values ?filters=[{\"n\":\"FileType\",\"t\":[\"equals('docx')\",\"equals('pptx')\"],\"o\":\"or\"}] If the targeted refiner template doesn't support multi values, only the first matching value will be selected by default. Date intervals ?filters=[{\"n\":\"Created\",\"t\":[\"yearAgo\"]}] Valid values are yesterday , weekAgo , monthAgo , threeMonthsAgo , yearAgo , olderThanYear . Date range ?filters=[{\"n\":\"Created\",\"t\":[\"range(2019-09-01T04:00:00.000Z,max)\"],\"o\":\"or\"}] Taxonomy values ?filters=[{\"n\":\"owstaxidmetadataalltagsinfo\",\"t\":[\"IT\",\"string('Governance')\"],\"o\":\"or\"}] // Only the 'Governance' results will show up since 'IT' is tokenized to HEX ?filters=[{\"n\":\"owstaxidmetadataalltagsinfo\",\"t\":[\"string('IT')\",\"string('Governance')\"],\"o\":\"or\"}] // 'IT' and 'Governance' results will show up Persona ?filters=[{\"n\":\"RefinableString05\",\"t\":[\"string('Franck')\"],\"o\":\"or\"}] Filter containing substring value ?filters=[{\"n\":\"FileType\",\"t\":[\"ppt*\"]}] OR ?filters=[{\"n\":\"FileType\",\"t\":[\"string('ppt*')\"]}] Use multiple refiner properties ?filters=[{\"n\":\"Created\",\"t\":[\"yearAgo\"],\"o\":\"or\"},{\"n\":\"FileType\",\"t\":[\"equals('docx')\",\"equals('pptx')\"],\"o\":\"or\"}] How default selected values are set in the search filters WP? \u00b6 If a search filters Web Part is connected to a search results WP, the refinement values will be automatically selected at page load according to this mechanism: When the provided condition IS NOT an FQL expression (ex: \"t\":[\"docx\"]), the value is converted to HEX and matched with the refinement results retrieved from the search engine. This token is then used to determine default selected state. When the provided condition IS an FQL expression (ex: \"t\":[\"equals('docx')\",\"equals('pptx')\"] ), the value is left untouched and matched with the refinement results by determining the common substring values and determine default selected state. It means in this case, mutliple refinement results can match a single provided condition (ex: 'Franck*' will match 'Cornu, Franck' or 'Franck Cornu' so they will both selected by default).","title":"Search Results"},{"location":"search-parts/search-results/#search-query-configuration","text":"Setting Description Search query keywords Here you choose to use a static search query or a query coming from a data source. It is recommended to use the associated Web Part coming with this sample. The search query is in KQL format so you can use search query variables (See this post to know which ones are allowed). You can only plug one source to this Web Part.","title":"Search Query Configuration"},{"location":"search-parts/search-results/#search-settings","text":"Setting Description Query template The search query template in KQL format. You can use search variables here (like Path:{Site}). Result Source Identifier The GUID of a SharePoint result source. Sort order The initial search results sort order, where you can use one or multiple properties to sort by. By default, results are sorted by created date (ascending) and size (descending). Remove these values to reset default sorting Sortable fields The search managed properties to use for sorting. With SharePoint Online, you have to reuse the default ones to do so (RefinableStringXX etc.). The order is the same as they will appear in the sort panel. You can also provide your own custom labels using the following format RefinableString01:\"You custom filter label\",RefinableString02:\"You custom filter label\",... If no sortable fields are provided, the 'Sort' button will not be visible. Connect to a search refiners Web Part If enable, select the search refiners Web Part to use on the current page to get selected filters. It is a 2 ways connection so don't forget to connect the targeted search refiners to the search results Web Part as well. Connect to a search verticals Web Part If enable, select the search verticals Web Part to connect to. Enable Query Rules Enable the query rules if applies. Turn this options 'on' to display your SharePoint Promoted results (links only) and make result blocks available to custom renderers. Include OneDrive results Include OneDrive results if applicable. Turn this option 'on' to make users' personal OneDrive results available to custom renderers. Read more here . Selected properties The search managed properties to retrieve. You can select them from a predefined list or add them as free text if not listed. Then, these properties are available in your Handlebars template with the syntax ( item.property_name or property_name inside the {{#each}} loop). The Web Part needs the following managed properties to get it work ( \"Title,Path,Filename,SiteLogo,PreviewUrl,PictureThumbnailURL,ServerRedirectedPreviewURL,ServerRedirectedURL,HitHighlightedSummary,FileType,ServerRedirectedEmbedURL,ParentLink,owstaxidmetadataalltagsinfo,SPSiteUrl,SiteTitle,IsContainer,IsListItem,HtmlFileType,SiteId,WebId,UniqueID,OriginalPath,FileExtension,NormSiteID,NormListID,NormUniqueID,Created,contentclass,DefaultEncodingURL,Author,AuthorOWSUSER\" ). It you remove them, they will be re-added automatically on the next page refresh . Refinement filters The default refinement filters to apply to the query. Unlike URL filters params, these won't select the default values in the Search Filters WP if connected. Enable taxonomy values localization for refiners and results If set, the Web Part will try to translate the taxonomy term IDs to their corresponding label according to the curent UI language. Refer to the Taxonomy values dynamic translation section of this page. Language of search request The language to use for the search request. By default the search request will be made using the current UI language. Synonyms Ability to define synonyms for the search querytext. Synonyms can be configured in a two-ways mode.","title":"Search Settings"},{"location":"search-parts/search-results/#paging-settings","text":"Setting Description Show paging Displays or not the paging control at the bottom. Number of items per page Corresponds to the number of search results to retrieve per page. Number of pages to display in range The number of page digits to display in the range. Hide navigation buttons If set, hide the previous and next page buttons. Hide first/last navigation buttons If set, hide the last and first navigation buttons. Hide navigation buttons If set, hide the previous, next, first and last if disabled (i.e. no page available).","title":"Paging settings"},{"location":"search-parts/search-results/#styling-options","text":"Setting Description Web Part Title Shows a title for this Web Part. Set blank if you don't want a title. Show blank if no result Shows nothing if there is no result. If a WP title is set, this will be hidden as well. Show result count Shows the result count and entered keywords. Result Layouts options Choose the template to use to display search results. Some layouts are defined by default but you can create your own either by clicking on the \"Custom\" tile, or \"Edit template\" from an existing chosen template. In custom mode, you can set an external template. It has to be in the same SharePoint tenant. Behind the scenes, the Office UI React controls are used. Custom code templates will also automatically be displayed here upon registration. See the templating documentation for more information about templating. Result types Allows you to set a custom template at item level according to a specific condition (ex: FileType equals 'pdf').","title":"Styling Options"},{"location":"search-parts/search-results/#miscellaneous-taxonomy-values-dynamic-translation","text":"The search results Web Part supports automatic translation for taxonomy based filters and result metadata according to current site language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn on the 'Localization Enabled' toggle in the search results property pane: When you enable this flag, you can still use the original property value for whatever reason by using the following property format in your Handlebars template: <propertyName> + TaxId (ex: owstaxidmetadataalltagsinfo will contain the translated terms and owstaxidmetadataalltagsinfoTaxId ) will contain the original value of the managed property).","title":"Miscellaneous: Taxonomy values dynamic translation"},{"location":"search-parts/search-results/#out-of-the-box-query-variables","text":"The following out of the box query variables are supported/tested:","title":"Out of the box query variables"},{"location":"search-parts/search-results/#site-and-site-collection-properties","text":"Query variable Definition {Site} or {Site.URL} URL of the site from where the query was issued. For example, this value can be used to query content of the managed property Path. {Site.ID} GUID of site from where the query was issued. This value corresponds to the value of the managed property SiteID. {Site.LCID} Numeric value of the locale as specified by the Regional Settings in the Site Settings on the Site from where the query was issued. {Site.Locale} Language of the Site from where the query was issued in ll-cc format \u2014 for example, en-us. {Site.\\<property>} Any property from the property bag of the site (SPWeb) from where the query was issued, including custom properties. {SiteCollection} or {SiteCollection.URL} URL of site collection from where the query was issued. For example, this value can be used to query content of the managed property Path. {SiteCollection.ID} GUID of site collection from where the query was issued. {SiteCollection.LCID} Numeric value of the locale as specified by the Regional Settings in the Site Settings on the Site Collection from where the query was issued. {SiteCollection.Locale} Language of the Site Collection from where the query was issued in ll-cc format \u2014 for example, en-us. {SiteCollection.\\<property>} Any property from the property bag of the root site (SPWeb) in the site collection (SPSite) from where the query was issued, including custom properties.","title":"Site and site collection properties"},{"location":"search-parts/search-results/#url-token-and-request-properties","text":"Query variable Definition {URLToken.\\<integer>} A value from the URL of a page. The integer represents the position of the value in the URL as counted from right to left. For example, for the page http://www.contoso/audio/mp3/1010101, the query variable {URLToken.1} will query for the last value in the URL, 1010101. The query variable {URLToken.3} will query for the third last property in the URL, audio. You can query for values up to the ninth last position in a URL. {Request.\\<PropertyName>} A value from the current http request - for example, {Request.Url}.","title":"URL token and request properties"},{"location":"search-parts/search-results/#user-properties","text":"Query variable Definition {User} or {User.Name} Display name of the user who issued the query. For example, this value can be used to query content of the managed property Author. {User.Email} Email address of the user who issued the query. For example, this value can be used to query content of the managed property WorkEmail. {User.PreferredContentLanguage} Language as specified as Preferred Content Language in the profile of the user who issued the query. {User.PreferredDisplayLanguage} Language as specified as Preferred Display Language in the profile of the user who issued the query. {User.\\<property>} Any property from the user profile of the user who issued the query \u2014 for example, SPS-Interests, including custom properties.","title":"User properties"},{"location":"search-parts/search-results/#other-properties","text":"Query variable Definition {Today+/- \\<integer value for number of days>} A date calculated by adding/subtracting the specified number of days to/from the date when the query is issued. Date format is YYYY-MM-DD. For example, this value can be used to query content of the managed property LastModifiedTime. {SearchBoxQuery} or {searchTerms} The query value entered into a search box on a page. {CurrentDisplayLanguage} The current display language based on MUI in ll-cc format. {CurrentDisplayLCID} Numeric value of the current display language based on MUI in ll-cc format.","title":"Other properties"},{"location":"search-parts/search-results/#custom-query-variables","text":"The following custom query variables are supported: Query variable Definition {Page.<FieldName>} The value of a field on the page from where the query was issued. For example, if the page from where the query was issued contained a site column named \"ContentOwner,\" specifying {Page.ContentOwner} would allow you to query for the value of \"ContentOwner.\" FieldName is the internal name of the field. When used with taxonomy columns, use {Page.<FieldName>.Label} or {Page.<FieldName>.TermID} {CurrentYear} Todays's date four digits, 2018 {CurrentMonth} Today's month, 1-12 {CurrentDate} Today's date, 1-31 {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber}. {PageContext.<ParameterName>} A value from the legacyPageContext object on the page. For example, if the legacyPageContext object of the current page contains a property \"hubSiteId\": \"166aa115-7ae7-4c21-9e02-9e0c8872be28\", you could obtain the value 166aa115-7ae7-4c21-9e02-9e0c8872be28 by specifying {PageContext.hubSiteId}. The property name is case sensitive! {TenantUrl} URL of the tenant (root site)","title":"Custom query variables"},{"location":"search-parts/search-results/#use-the-or-operator","text":"To deal with mutli valued properties (like taxonomy multi or choices), you can use the 'OR' operator syntax {|<property><operator><multi_valuesporperty>} . The search query will be expanded like this: ((<property><operator><value_1>) OR (<property><operator><value_2>) OR (<property><operator><value_3>) ...) Examples: Using an user profile multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{User.SPS-Hashtags}} Using a page multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermID}} Using a page multi values choice property: {|RefinableStringXX:{Page.myChoiceMultiColumn}} At any time, you can see the resolved query using the 'Debug' layout an inspecting the queryModification property.","title":"Use the 'OR' operator"},{"location":"search-parts/search-results/#best-bets","text":"This WP supports SharePoint best bets via SharePoint query rules:","title":"Best bets"},{"location":"search-parts/search-results/#filters-deep-links","text":"You can pre-select refinement filters by using the filters URL query string parameter. They can be used with or without the search filters Web Part but need at least a search results Web Part on the page. The URL parameter format is as follow: ?filters=[{\"n\":\"<property-name>\",\"t\":[\"<condition1>\",\"<condition2>\",...],\"o\":\"<operator>\"}] Where: n : the refiner managed property name (ex: RefinableStringXX ) t : the condition tokens. This must be an array even with a single value. Raw text values and FQL expressions are allowed here. o : the operator to use between condition values (optionnal). Pre-selected filters are only applied at page load . Provided refinement filter values are independant from the search filters Web Part configuration. URL params refinement filters take priority over default refinement filters set in the search results Web Part options.","title":"Filters deep links"},{"location":"search-parts/search-results/#examples","text":"Use free text values ?filters=[{\"n\":\"FileType\",\"t\":[\"docx\"]}] FQL expressions with multiple values ?filters=[{\"n\":\"FileType\",\"t\":[\"equals('docx')\",\"equals('pptx')\"],\"o\":\"or\"}] If the targeted refiner template doesn't support multi values, only the first matching value will be selected by default. Date intervals ?filters=[{\"n\":\"Created\",\"t\":[\"yearAgo\"]}] Valid values are yesterday , weekAgo , monthAgo , threeMonthsAgo , yearAgo , olderThanYear . Date range ?filters=[{\"n\":\"Created\",\"t\":[\"range(2019-09-01T04:00:00.000Z,max)\"],\"o\":\"or\"}] Taxonomy values ?filters=[{\"n\":\"owstaxidmetadataalltagsinfo\",\"t\":[\"IT\",\"string('Governance')\"],\"o\":\"or\"}] // Only the 'Governance' results will show up since 'IT' is tokenized to HEX ?filters=[{\"n\":\"owstaxidmetadataalltagsinfo\",\"t\":[\"string('IT')\",\"string('Governance')\"],\"o\":\"or\"}] // 'IT' and 'Governance' results will show up Persona ?filters=[{\"n\":\"RefinableString05\",\"t\":[\"string('Franck')\"],\"o\":\"or\"}] Filter containing substring value ?filters=[{\"n\":\"FileType\",\"t\":[\"ppt*\"]}] OR ?filters=[{\"n\":\"FileType\",\"t\":[\"string('ppt*')\"]}] Use multiple refiner properties ?filters=[{\"n\":\"Created\",\"t\":[\"yearAgo\"],\"o\":\"or\"},{\"n\":\"FileType\",\"t\":[\"equals('docx')\",\"equals('pptx')\"],\"o\":\"or\"}]","title":"Examples"},{"location":"search-parts/search-results/#how-default-selected-values-are-set-in-the-search-filters-wp","text":"If a search filters Web Part is connected to a search results WP, the refinement values will be automatically selected at page load according to this mechanism: When the provided condition IS NOT an FQL expression (ex: \"t\":[\"docx\"]), the value is converted to HEX and matched with the refinement results retrieved from the search engine. This token is then used to determine default selected state. When the provided condition IS an FQL expression (ex: \"t\":[\"equals('docx')\",\"equals('pptx')\"] ), the value is left untouched and matched with the refinement results by determining the common substring values and determine default selected state. It means in this case, mutliple refinement results can match a single provided condition (ex: 'Franck*' will match 'Cornu, Franck' or 'Franck Cornu' so they will both selected by default).","title":"How default selected values are set in the search filters WP?"},{"location":"search-parts/search-verticals/","text":"The search verticals Web Part allow users to search through predefined scopes (i.e videos, people, etc.) or redirect to an arbitrary URL. We simply replace the query template and result source dynamically for a chosen vertical. To get it work, you simply need to connect the search verticals Web Part to a search results Web Part using the associated option. Also, if you want to display counts for each verticals when a new query is performed (for instance a search box query or an URL fragment update), connect the search results Web Part to the search verticals one (two ways connection in this case). Verticals Options \u00b6 Page 1 Page 2 Page 3 Setting Description Search verticals Configure the search verticals to display. When you set a query template or a result source id for a vertical, these override the ones in the connected search results. You can also set an icon for a vertical using Office UI Fabric icons names . The query keywords are shared across all verticals. For instance, if you need default results for tabs, just specify a default query in the connected search results Web Part (like * ) and the {searchTerms} expression in your vertical query template. Also, selected refinement filters are reset, if present, when a new vertical is selected. You can also specify an arbitrary link for a vertical. In this case, the selected vertical won't be sent to the connected search results WP. You can use tokens inside the Link URL field. The supported tokens are {Page.xxx} , {CurrentDate} , {CurrentYear} , {CurrentMonth} , {URLToken.xxx} , {QueryString.xxx} , {PageContext.xxx} , {TenantUrl} , {searchTerms} and {SearchBoxQuery} . Show results count Indicates if the results count should be displayed for each vertical. In this case, you need to connect the Web Part to an existing search results Web Part on the page.","title":"Search Verticals"},{"location":"search-parts/search-verticals/#verticals-options","text":"Page 1 Page 2 Page 3 Setting Description Search verticals Configure the search verticals to display. When you set a query template or a result source id for a vertical, these override the ones in the connected search results. You can also set an icon for a vertical using Office UI Fabric icons names . The query keywords are shared across all verticals. For instance, if you need default results for tabs, just specify a default query in the connected search results Web Part (like * ) and the {searchTerms} expression in your vertical query template. Also, selected refinement filters are reset, if present, when a new vertical is selected. You can also specify an arbitrary link for a vertical. In this case, the selected vertical won't be sent to the connected search results WP. You can use tokens inside the Link URL field. The supported tokens are {Page.xxx} , {CurrentDate} , {CurrentYear} , {CurrentMonth} , {URLToken.xxx} , {QueryString.xxx} , {PageContext.xxx} , {TenantUrl} , {searchTerms} and {SearchBoxQuery} . Show results count Indicates if the results count should be displayed for each vertical. In this case, you need to connect the Web Part to an existing search results Web Part on the page.","title":"Verticals Options"},{"location":"search-parts/templating/","text":"Available layouts \u00b6 By default, the search results Web Part comes with multiples layouts. All layouts rely on Handlebars templates. The templating feature comes directly from the original react-content-query-webpart so thanks to @spplante! Some provided templates embed web components (via custom HTML elements) wrapping Office UI Fabric React controls (ex: DetailsList, DocumentCard). For those, you can only customize them using the provided template options and placeholders and it means you don't have access to their underlying HTML markup. Simple List \u00b6 Displays the search results as a simple list with previews: Details List \u00b6 Displays the search results inside a tabular view using the associated Office UI Fabric DetailsList control : Template options \u00b6 Option Description Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Column name : the column name to display. Minimum width in px : the minimum width of the column. Maximum width in px : the maximum width of the column. Sortable : allows you to sort column values alphabetically when the column header is clicked (ascending or descending). Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Link to item : if enabled, wrap the column value with an URL link pointing to the search result item (i.e. Path). This option is especially suitable for the 'Title' column. Column value : you can choose here either a managed property value (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @themeVariant to use theme colors (ex: @themeVariant.palette.themePrimary ) Show file icon Hide or display the file icon in the first column. Compact mode Display the details list in compact mode. Document Card \u00b6 Displays search results as cards view using the associated Office UI Fabric DocumentCard control : Note : you can still manage the number of cards displayed by row by changing the grid CSS classes directly in the template: {{#each items as |item|}} <div class=\"ms-Grid-col ms-sm12 ms-md6 ms-lg4\"> <!-- 3 cards by row here for large screen resolution --> ... </div> {{/each}} Template options \u00b6 Option Description Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a managed property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, whatever if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). In order to use the property IconSrc , ensure you do not specify a property for File Extension to not override the custom IconSrc. A custom icon should be a 16x16 pixel image. For HTML fields you can use the special variable @themeVariant to use theme colors (ex: @themeVariant.palette.themePrimary ). If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: | Enable result preview | If enabled, displays a preview callout when the document card image is clicked. | Show file icon | Hide or display the file icon in the card. | Compact mode | Display the cards in compact mode. Carousel/Slider \u00b6 Displays search results as a carousel using the Flickity library (the same used in the PnP Starter Intranet solution ). Customize slide content \u00b6 By default, documents card are displayed in the slider but you can add your own HTML markup for each slide inside the {{#>slider}} Handlebars partial: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <!-- Slide content goes here --> <div class=\"slide\"> <!-- Your HTML markup --> </div> {{/slider}} Item properties and all Handlebars helpers are available inside the partial block (Ex: {{Title}} ). However, to use them you must escape every Handlebars expression with the '\\' character (ex: {{Title}} becomes \\{{Title}} ). This is because we don't want these expressions to be interpreted by the global Handlebars context. Actually, we use an internal compilation process with the item context so we need the raw expression to output the item properties and helpers correctly. For instance if you want an image carousel only, your HTML markup would be: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <img src=\"\\{{getPreviewSrc item}}\"/> {{/slider}} Or only person cards: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <div class=\"slide\"> \\{{#with (split AccountName '|')}} <pnp-persona-card data-image-url=\"/_layouts/15/userphoto.aspx?size=L&username=\\{{[2]}}\" data-text=\"\\{{../FirstName}} \\{{../LastName}}\" data-secondary-text=\"\\{{../JobTitle}}\" data-tertiary-text=\"\\{{[2]}}\" data-optional-text=\"\\{{../WorkPhone}}\" data-persona-size=\"14\" > </pnp-persona-card> \\{{/with}} </div> {{/slider}} In the case of images, the slider is smart enough to adjsut the height automatically so you don't need to specify explicit values. However, you can set an arbitrary size for the slides updating the CSS slide class. Template options \u00b6 Option Description Auto play If enabled, slides move automatically every X seconds. Auto play duration Move elements every X seconds. Pause on hover If enabled, pause the slider on mouse hover. Number of elements to group together in slides Groups cells together in slides. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. Infinite scrolling Enable or disable infinite scrolling on the carousel. Debug View \u00b6 Displays search result items and global Handlebars context in a debug view (read only): People View \u00b6 Displays people: Template options \u00b6 Option Description Manage persona fields Allows you to define you own values for card placeholder fields. Like the document card, by default, the persona card fields come with predefined mappings but you can set your own. Picture size The size of the person picture to isplay. The more the size is and the more information will be displayed for each item and vice versa. Disable info on hover Disable the hover behavior for people info panel. (for future use) Customize templates with Handlebars \u00b6 If provided layouts don't meet your requirements, you can modifiy them or start from scratch using Handlebars and the following helpers/features: Accessing items \u00b6 To iterate the regular result set use: {{#each items as |item|}} < div > {{Title}} ... </ div > {{/each}} To iterate promoted results use: {{#each promotedResults as |promotedResult|}} < div > {{Title}} ... </ div > {{/each}} To iterate result block results use: {{#each secondaryResults as |secondaryResult|}} < div > {{Title}} ... </ div > {{/each}} Styling \u00b6 You can write your own CSS styles inside templates. However, all CSS rules (including @media rules) will be prefixed automatically by an unique ID according to the follwoing pattern ( pnp-modern-search-template_\\<Web Part instance ID> ) to make sure styles are isolated from other Web Parts on the page. Sanitized HTML \u00b6 The HTML is sanitized automatically preventing XSS attacks using DOMPurify . It means for instance, you cannot add your own <script> tags or inline JavaScript. Handlebars helpers \u00b6 The following custom helpers are available in addition to the handlebars-helpers : Setting Description {{showResultsCount}} Boolean flag corresponding to the associated in the property pane. {{totalRows}} The result count. {{maxResultsCount}} The number of results configured to retrieve in the web part. {{actualResultsCount}} The actual number of results retrived. {{keywords}} The search query. {{getSummary HitHighlightedSummary}} Format the HitHighlightedSummary property with recognized words in bold. {{getDate <date_managed_property> \"<format>\" <time handling> <isZ>}} Format the date with Moment.js according to the current language. Date in the managed property should be on the form 2018-09-10T06:29:25.0000000Z for the function to work. <time handling> is optional and takes 0 = format to browsers time zone (default) 1 = ignore Z time and handle as browsers local time zone 2 = strip time and set to 00:00:00 in browsers local time zone 3 = display in the time zone for the current web 4 = display in the time zone from the uers profile <isZ> ( true/false ) is optional and will append Z to the date if missing when set to true. {{getPreviewSrc item}} Determine the image thumbnail URL if applicable. Include NormSiteID, NormListID and NormUniqueID as managed properties to ensure previews for Pages and Files. {{getUrl item <forceDirectLink>}} Get the item URL. For a document, it means the URL to the Office Online instance or the direct URL (to download it). <forceDirectLink> ( true/false ) is optional with a default value of false . Set to true to avoid smart logic to create the open URL. {{getUrlField managed_propertyOWSURLH \"URL/Title\"}} Return the URL or Title part of a URL field managed property. {{getCountMessage totalRows <?keywords>}} Display a friendly message displaying the result and the entered keywords. {{<search_managed_property_name>}} Any valid search managed property returned in the results set. These are typically managed properties set in the \"Selected properties\" setting in the property pane. You don't need to prefix them with item. if you are in the \"each\" loop. {{webUrl}} The current web relative url. Use {{@root/webUrl}} inside a loop. {{siteUrl}} The current site relative url. Use {{@root/siteUrl}} inside a loop. {{spellingSuggestion}} Spelling suggestions returned for the query to be used for \"Did you mean\" functionality. {{getUniqueCount items \"property\"}} Get the unique count of a property over the result set (or another array) {{getUniqueCount array}} Get the unique count of objects in an array. Example: [1,1,1,2,2,4] would return 3 . {{getUnique items \"NewsCategory\"}} Return the unique values as a new array based on an array or property of an object in the array. {{regex <exp> <string> }} Match a regular expression against a string. {{#times 10}}<span>{{this}}</span>{{/times}} Iterate X times over a block {{#group items by=\"owstaxidmetadataalltagsinfo\"}} Group items by a specific results property. See https://github.com/shannonmoeller/handlebars-group-by for usage. {{#getAttachments LinkOfficeChild}} <a href=\"{{url}}\">{{fileName}}</href> {{/getAttachments}} Get Attachments is Handlebars block helper intended to be used with the context variables it provides like this (url and filename) in the example.The helper is intended to be used only with the LinkOfficeChild managed property wich is the default managed property for list attachments. {{getPageContext \"property\"}} Retrieve SPFx page context data to show in the template. See https://docs.microsoft.com/en-us/javascript/api/sp-page-context/pagecontext for possible values. Example {{getPageContext \"user.displayName\"}} {{getPageContext \"cultureInfo.currentUICultureName\"}} . Note: Casing matches the object model. You can also define your own in the BaseTemplateService.ts file. See helper-moment for date samples using moment. Web-components \u00b6 The web part has a couple of helper web-components to ease rendering, used by the default templates. You may also use these in your custom templates. Pick one of the default templates, then click on customize to see how they are used. It's important to prefix these web-components with pnp- . document-card document-card-shimmers details-list video-card debug-view slider-component persona-card persona-card-shimmers fabric-icon - You only need to set one property, which are evaluated in order if multiple ones are set. The data-error-image, used to set a fallback image on error, is used only when the data-image-url fails to load, it will not load a fallback for data-icon-name usage. < pnp-fabric-icon data-image-url = '[url to icon - pri 1]' data-file-extension = '[file extension - pri 2]' data-icon-name = '[office ui fabric icon name - pri 3]' data-size = '16 | 20 | 32 (default) | 40 | 48 | 64 | 96' data-error-image = '[url to image]' > </ pnp-fabric-icon > accordion - provides the ability to collaspe content in search result in an accordion fashion < pnp-accordion data-accordion-header-text = \"Accordion Example\" data-theme = \"Default (default) | Neutral\" data-size = \"# | 12 (default)\" data-start-open = \"true | false (default)\" data-rounded-corners = \"true | false (default)\" > < h4 > Title: {{Title}} </ h4 > </ pnp-accordion > Example: popup - provides the ability to popup content in a modal window within the search result < pnp-popup > < template id = \"popupclick\" > < span > Popup Example - Click Me </ span > </ template > < template id = \"popupheader\" > < span > Title: {{Title}} </ span >< br />< span > Header HTML here </ span > </ template > < template id = \"popupbody\" > < span > Title: {{Title}} </ span >< br />< span > Body HTML here </ span > </ template > </ pnp-popup > Example: lookup-list-expander - Ever needed to get additional data from a list or library in search? This provides that ability based on a lookup column of the result item. In the example below, a related documents lookup column was added to the document library. This lookup column was a lookup back to the same document library so the admin could pick additional related documents for the documents. Remember for the inner template to be executed inside of the component the handlebar expressions must be escaped with '\\' character (ex: {{Title}} becomes \\{{Title}} ). < pnp-lookup-list-expander data-list-url = \"https://<tenant>/sites/<sitename>\" data-list-id = \"{{ListID}}\" data-list-item-id = \"{{ListItemID}}\" data-column-name = \"RelatedDocuments\" data-lookup-list-fields = \"Id,Title,FileRef,FileLeafRef,DocumentType,BusinessUnit/Title\" > < div > < pnp-fabric-icon data-file-extension = \"\\{{FileExtension}}\" ></ pnp-fabric-icon > < span >< a href = \"\\{{FileRef}}?web=1\" > \\{{{Title}}} </ a ></ span > < span > < a href = \"\\{{FileRef}}\" > < pnp-fabric-icon data-icon-name = \"Download\" data-size = \"16\" ></ pnp-fabric-icon > </ a > </ span > < div > < span > \\{{{DocumentType}}} </ span > < span > \\{{{BusinessUnit.Title}}} </ span > </ div > </ div > </ pnp-lookup-list-expander > The above example would display inside of the accordion like: Use result types \u00b6 Use the result types features form the property pane options to split your templates according to results characteristics instead of making a huge central template with multiple conditions. They can be defined in 'inline' mode or using an external file. You can also use the sorting option to determine to order of evaluation for each condition. The following operators are supported: - Equals - Not equals - Contains - StartsWith - Greater Or Equal - Less Or Equal - Less than - Greater than - Is not null To use it in your main template, just follow this pattern. This block is not mandatory. {{#> resultTypes}} {{!-- The block below will be used as default item template if no result types matched --}} <div class=\"template_result\"> <!-- Your default template markup --> </div> {{/resultTypes}} Handlebars partials are used behind the scenes and conditions are built dynamically using a recursive if/else structure. Elements previews \u00b6 Previews are available by default for the simple list layout, for Office documents and Office 365 videos (not Microsoft Stream). The embed URL is directly taken from the ServerRedirectedEmbedURL managed property retrieved from the search results. The WebPart must have the following selected properties in the configuration to get the preview feature work (they are set by default): - ServerRedirectedPreviewURL - ServerRedirectedURL - contentclass - ServerRedirectedEmbedURL - DefaultEncodingURL This preview is displayed as an iframe or a video tag when the user clicks on the corresponding preview image or compliant HTML elements. To enable the callout preview in your templates, your HTML elements must have the document-preview-item or video-preview-item CSS class and provide the following attributes: data-src : the URL of the preview image. data-url : the URL of the iframe source or the video. data-fileext : the file extension for the video (for video only). Preview on documents <img class=\"document-preview-item\" data-src=\"{{ServerRedirectedPreviewURL}}\" data-url=\"{{Path}}\"/> Preview on videos <img class=\"video-preview-item\" src=\"{{PictureThumbnailURL}}\" data-src=\"{{PictureThumbnailURL}}\" data-url=\"{{DefaultEncodingURL}}\" data-fileext=\"{{FileType}}\"/> Custom placeholders (i.e. shimmers) \u00b6 You can define your own placeholders according your template markup. They will be loaded automatically before the results are loaded. To do this, insert your HTML markup as follow in your template content: <content id=\"placeholder\"> <style> /* Insert your CSS overrides here */ </style> <div class=\"placeholder_root\"> <!-- Your placeholder content --> </div> </content> Notice your template content must be enclosed in a <content id=\"template\"> tag if you define placeholders. Work with SharePoint theme \u00b6 A themeVariant variable is available in the root Handlebars context. It contains all current theme information that can use in your CSS classes or inline styles. Example: <style> .example-themePrimary a { color: {{@root.themeVariant.palette.themePrimary}}; } </style> To see all available values, you can inspect the themeVariant objetc using the 'Debug View' layout. Notice the values are udpated dynamically every time you udpate the theme through the UI. Custom code renderers \u00b6 You may also define your own renderers, which most often should be SPFx application customizers. These should use the resultservice to register themselves as renderers, and will upon registration be available as a rendering choice in the \"Result Layouts\" Section. More information about custom code renderers may be found in a separate project search-custom-renderer , which showcases such a renderer.","title":"Templating"},{"location":"search-parts/templating/#available-layouts","text":"By default, the search results Web Part comes with multiples layouts. All layouts rely on Handlebars templates. The templating feature comes directly from the original react-content-query-webpart so thanks to @spplante! Some provided templates embed web components (via custom HTML elements) wrapping Office UI Fabric React controls (ex: DetailsList, DocumentCard). For those, you can only customize them using the provided template options and placeholders and it means you don't have access to their underlying HTML markup.","title":"Available layouts"},{"location":"search-parts/templating/#simple-list","text":"Displays the search results as a simple list with previews:","title":"Simple List"},{"location":"search-parts/templating/#details-list","text":"Displays the search results inside a tabular view using the associated Office UI Fabric DetailsList control :","title":"Details List"},{"location":"search-parts/templating/#template-options","text":"Option Description Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Column name : the column name to display. Minimum width in px : the minimum width of the column. Maximum width in px : the maximum width of the column. Sortable : allows you to sort column values alphabetically when the column header is clicked (ascending or descending). Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Link to item : if enabled, wrap the column value with an URL link pointing to the search result item (i.e. Path). This option is especially suitable for the 'Title' column. Column value : you can choose here either a managed property value (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @themeVariant to use theme colors (ex: @themeVariant.palette.themePrimary ) Show file icon Hide or display the file icon in the first column. Compact mode Display the details list in compact mode.","title":"Template options"},{"location":"search-parts/templating/#document-card","text":"Displays search results as cards view using the associated Office UI Fabric DocumentCard control : Note : you can still manage the number of cards displayed by row by changing the grid CSS classes directly in the template: {{#each items as |item|}} <div class=\"ms-Grid-col ms-sm12 ms-md6 ms-lg4\"> <!-- 3 cards by row here for large screen resolution --> ... </div> {{/each}}","title":"Document Card"},{"location":"search-parts/templating/#template-options_1","text":"Option Description Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a managed property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, whatever if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). In order to use the property IconSrc , ensure you do not specify a property for File Extension to not override the custom IconSrc. A custom icon should be a 16x16 pixel image. For HTML fields you can use the special variable @themeVariant to use theme colors (ex: @themeVariant.palette.themePrimary ). If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: | Enable result preview | If enabled, displays a preview callout when the document card image is clicked. | Show file icon | Hide or display the file icon in the card. | Compact mode | Display the cards in compact mode.","title":"Template options"},{"location":"search-parts/templating/#carouselslider","text":"Displays search results as a carousel using the Flickity library (the same used in the PnP Starter Intranet solution ).","title":"Carousel/Slider"},{"location":"search-parts/templating/#customize-slide-content","text":"By default, documents card are displayed in the slider but you can add your own HTML markup for each slide inside the {{#>slider}} Handlebars partial: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <!-- Slide content goes here --> <div class=\"slide\"> <!-- Your HTML markup --> </div> {{/slider}} Item properties and all Handlebars helpers are available inside the partial block (Ex: {{Title}} ). However, to use them you must escape every Handlebars expression with the '\\' character (ex: {{Title}} becomes \\{{Title}} ). This is because we don't want these expressions to be interpreted by the global Handlebars context. Actually, we use an internal compilation process with the item context so we need the raw expression to output the item properties and helpers correctly. For instance if you want an image carousel only, your HTML markup would be: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <img src=\"\\{{getPreviewSrc item}}\"/> {{/slider}} Or only person cards: {{#>slider items=(JSONstringify @root.items 2) options=(JSONstringify @root.sliderOptions)}} <div class=\"slide\"> \\{{#with (split AccountName '|')}} <pnp-persona-card data-image-url=\"/_layouts/15/userphoto.aspx?size=L&username=\\{{[2]}}\" data-text=\"\\{{../FirstName}} \\{{../LastName}}\" data-secondary-text=\"\\{{../JobTitle}}\" data-tertiary-text=\"\\{{[2]}}\" data-optional-text=\"\\{{../WorkPhone}}\" data-persona-size=\"14\" > </pnp-persona-card> \\{{/with}} </div> {{/slider}} In the case of images, the slider is smart enough to adjsut the height automatically so you don't need to specify explicit values. However, you can set an arbitrary size for the slides updating the CSS slide class.","title":"Customize slide content"},{"location":"search-parts/templating/#template-options_2","text":"Option Description Auto play If enabled, slides move automatically every X seconds. Auto play duration Move elements every X seconds. Pause on hover If enabled, pause the slider on mouse hover. Number of elements to group together in slides Groups cells together in slides. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. Infinite scrolling Enable or disable infinite scrolling on the carousel.","title":"Template options"},{"location":"search-parts/templating/#debug-view","text":"Displays search result items and global Handlebars context in a debug view (read only):","title":"Debug View"},{"location":"search-parts/templating/#people-view","text":"Displays people:","title":"People View"},{"location":"search-parts/templating/#template-options_3","text":"Option Description Manage persona fields Allows you to define you own values for card placeholder fields. Like the document card, by default, the persona card fields come with predefined mappings but you can set your own. Picture size The size of the person picture to isplay. The more the size is and the more information will be displayed for each item and vice versa. Disable info on hover Disable the hover behavior for people info panel. (for future use)","title":"Template options"},{"location":"search-parts/templating/#customize-templates-with-handlebars","text":"If provided layouts don't meet your requirements, you can modifiy them or start from scratch using Handlebars and the following helpers/features:","title":"Customize templates with Handlebars"},{"location":"search-parts/templating/#accessing-items","text":"To iterate the regular result set use: {{#each items as |item|}} < div > {{Title}} ... </ div > {{/each}} To iterate promoted results use: {{#each promotedResults as |promotedResult|}} < div > {{Title}} ... </ div > {{/each}} To iterate result block results use: {{#each secondaryResults as |secondaryResult|}} < div > {{Title}} ... </ div > {{/each}}","title":"Accessing items"},{"location":"search-parts/templating/#styling","text":"You can write your own CSS styles inside templates. However, all CSS rules (including @media rules) will be prefixed automatically by an unique ID according to the follwoing pattern ( pnp-modern-search-template_\\<Web Part instance ID> ) to make sure styles are isolated from other Web Parts on the page.","title":"Styling"},{"location":"search-parts/templating/#sanitized-html","text":"The HTML is sanitized automatically preventing XSS attacks using DOMPurify . It means for instance, you cannot add your own <script> tags or inline JavaScript.","title":"Sanitized HTML"},{"location":"search-parts/templating/#handlebars-helpers","text":"The following custom helpers are available in addition to the handlebars-helpers : Setting Description {{showResultsCount}} Boolean flag corresponding to the associated in the property pane. {{totalRows}} The result count. {{maxResultsCount}} The number of results configured to retrieve in the web part. {{actualResultsCount}} The actual number of results retrived. {{keywords}} The search query. {{getSummary HitHighlightedSummary}} Format the HitHighlightedSummary property with recognized words in bold. {{getDate <date_managed_property> \"<format>\" <time handling> <isZ>}} Format the date with Moment.js according to the current language. Date in the managed property should be on the form 2018-09-10T06:29:25.0000000Z for the function to work. <time handling> is optional and takes 0 = format to browsers time zone (default) 1 = ignore Z time and handle as browsers local time zone 2 = strip time and set to 00:00:00 in browsers local time zone 3 = display in the time zone for the current web 4 = display in the time zone from the uers profile <isZ> ( true/false ) is optional and will append Z to the date if missing when set to true. {{getPreviewSrc item}} Determine the image thumbnail URL if applicable. Include NormSiteID, NormListID and NormUniqueID as managed properties to ensure previews for Pages and Files. {{getUrl item <forceDirectLink>}} Get the item URL. For a document, it means the URL to the Office Online instance or the direct URL (to download it). <forceDirectLink> ( true/false ) is optional with a default value of false . Set to true to avoid smart logic to create the open URL. {{getUrlField managed_propertyOWSURLH \"URL/Title\"}} Return the URL or Title part of a URL field managed property. {{getCountMessage totalRows <?keywords>}} Display a friendly message displaying the result and the entered keywords. {{<search_managed_property_name>}} Any valid search managed property returned in the results set. These are typically managed properties set in the \"Selected properties\" setting in the property pane. You don't need to prefix them with item. if you are in the \"each\" loop. {{webUrl}} The current web relative url. Use {{@root/webUrl}} inside a loop. {{siteUrl}} The current site relative url. Use {{@root/siteUrl}} inside a loop. {{spellingSuggestion}} Spelling suggestions returned for the query to be used for \"Did you mean\" functionality. {{getUniqueCount items \"property\"}} Get the unique count of a property over the result set (or another array) {{getUniqueCount array}} Get the unique count of objects in an array. Example: [1,1,1,2,2,4] would return 3 . {{getUnique items \"NewsCategory\"}} Return the unique values as a new array based on an array or property of an object in the array. {{regex <exp> <string> }} Match a regular expression against a string. {{#times 10}}<span>{{this}}</span>{{/times}} Iterate X times over a block {{#group items by=\"owstaxidmetadataalltagsinfo\"}} Group items by a specific results property. See https://github.com/shannonmoeller/handlebars-group-by for usage. {{#getAttachments LinkOfficeChild}} <a href=\"{{url}}\">{{fileName}}</href> {{/getAttachments}} Get Attachments is Handlebars block helper intended to be used with the context variables it provides like this (url and filename) in the example.The helper is intended to be used only with the LinkOfficeChild managed property wich is the default managed property for list attachments. {{getPageContext \"property\"}} Retrieve SPFx page context data to show in the template. See https://docs.microsoft.com/en-us/javascript/api/sp-page-context/pagecontext for possible values. Example {{getPageContext \"user.displayName\"}} {{getPageContext \"cultureInfo.currentUICultureName\"}} . Note: Casing matches the object model. You can also define your own in the BaseTemplateService.ts file. See helper-moment for date samples using moment.","title":"Handlebars helpers"},{"location":"search-parts/templating/#web-components","text":"The web part has a couple of helper web-components to ease rendering, used by the default templates. You may also use these in your custom templates. Pick one of the default templates, then click on customize to see how they are used. It's important to prefix these web-components with pnp- . document-card document-card-shimmers details-list video-card debug-view slider-component persona-card persona-card-shimmers fabric-icon - You only need to set one property, which are evaluated in order if multiple ones are set. The data-error-image, used to set a fallback image on error, is used only when the data-image-url fails to load, it will not load a fallback for data-icon-name usage. < pnp-fabric-icon data-image-url = '[url to icon - pri 1]' data-file-extension = '[file extension - pri 2]' data-icon-name = '[office ui fabric icon name - pri 3]' data-size = '16 | 20 | 32 (default) | 40 | 48 | 64 | 96' data-error-image = '[url to image]' > </ pnp-fabric-icon > accordion - provides the ability to collaspe content in search result in an accordion fashion < pnp-accordion data-accordion-header-text = \"Accordion Example\" data-theme = \"Default (default) | Neutral\" data-size = \"# | 12 (default)\" data-start-open = \"true | false (default)\" data-rounded-corners = \"true | false (default)\" > < h4 > Title: {{Title}} </ h4 > </ pnp-accordion > Example: popup - provides the ability to popup content in a modal window within the search result < pnp-popup > < template id = \"popupclick\" > < span > Popup Example - Click Me </ span > </ template > < template id = \"popupheader\" > < span > Title: {{Title}} </ span >< br />< span > Header HTML here </ span > </ template > < template id = \"popupbody\" > < span > Title: {{Title}} </ span >< br />< span > Body HTML here </ span > </ template > </ pnp-popup > Example: lookup-list-expander - Ever needed to get additional data from a list or library in search? This provides that ability based on a lookup column of the result item. In the example below, a related documents lookup column was added to the document library. This lookup column was a lookup back to the same document library so the admin could pick additional related documents for the documents. Remember for the inner template to be executed inside of the component the handlebar expressions must be escaped with '\\' character (ex: {{Title}} becomes \\{{Title}} ). < pnp-lookup-list-expander data-list-url = \"https://<tenant>/sites/<sitename>\" data-list-id = \"{{ListID}}\" data-list-item-id = \"{{ListItemID}}\" data-column-name = \"RelatedDocuments\" data-lookup-list-fields = \"Id,Title,FileRef,FileLeafRef,DocumentType,BusinessUnit/Title\" > < div > < pnp-fabric-icon data-file-extension = \"\\{{FileExtension}}\" ></ pnp-fabric-icon > < span >< a href = \"\\{{FileRef}}?web=1\" > \\{{{Title}}} </ a ></ span > < span > < a href = \"\\{{FileRef}}\" > < pnp-fabric-icon data-icon-name = \"Download\" data-size = \"16\" ></ pnp-fabric-icon > </ a > </ span > < div > < span > \\{{{DocumentType}}} </ span > < span > \\{{{BusinessUnit.Title}}} </ span > </ div > </ div > </ pnp-lookup-list-expander > The above example would display inside of the accordion like:","title":"Web-components"},{"location":"search-parts/templating/#use-result-types","text":"Use the result types features form the property pane options to split your templates according to results characteristics instead of making a huge central template with multiple conditions. They can be defined in 'inline' mode or using an external file. You can also use the sorting option to determine to order of evaluation for each condition. The following operators are supported: - Equals - Not equals - Contains - StartsWith - Greater Or Equal - Less Or Equal - Less than - Greater than - Is not null To use it in your main template, just follow this pattern. This block is not mandatory. {{#> resultTypes}} {{!-- The block below will be used as default item template if no result types matched --}} <div class=\"template_result\"> <!-- Your default template markup --> </div> {{/resultTypes}} Handlebars partials are used behind the scenes and conditions are built dynamically using a recursive if/else structure.","title":"Use result types"},{"location":"search-parts/templating/#elements-previews","text":"Previews are available by default for the simple list layout, for Office documents and Office 365 videos (not Microsoft Stream). The embed URL is directly taken from the ServerRedirectedEmbedURL managed property retrieved from the search results. The WebPart must have the following selected properties in the configuration to get the preview feature work (they are set by default): - ServerRedirectedPreviewURL - ServerRedirectedURL - contentclass - ServerRedirectedEmbedURL - DefaultEncodingURL This preview is displayed as an iframe or a video tag when the user clicks on the corresponding preview image or compliant HTML elements. To enable the callout preview in your templates, your HTML elements must have the document-preview-item or video-preview-item CSS class and provide the following attributes: data-src : the URL of the preview image. data-url : the URL of the iframe source or the video. data-fileext : the file extension for the video (for video only). Preview on documents <img class=\"document-preview-item\" data-src=\"{{ServerRedirectedPreviewURL}}\" data-url=\"{{Path}}\"/> Preview on videos <img class=\"video-preview-item\" src=\"{{PictureThumbnailURL}}\" data-src=\"{{PictureThumbnailURL}}\" data-url=\"{{DefaultEncodingURL}}\" data-fileext=\"{{FileType}}\"/>","title":"Elements previews"},{"location":"search-parts/templating/#custom-placeholders-ie-shimmers","text":"You can define your own placeholders according your template markup. They will be loaded automatically before the results are loaded. To do this, insert your HTML markup as follow in your template content: <content id=\"placeholder\"> <style> /* Insert your CSS overrides here */ </style> <div class=\"placeholder_root\"> <!-- Your placeholder content --> </div> </content> Notice your template content must be enclosed in a <content id=\"template\"> tag if you define placeholders.","title":"Custom placeholders (i.e. shimmers)"},{"location":"search-parts/templating/#work-with-sharepoint-theme","text":"A themeVariant variable is available in the root Handlebars context. It contains all current theme information that can use in your CSS classes or inline styles. Example: <style> .example-themePrimary a { color: {{@root.themeVariant.palette.themePrimary}}; } </style> To see all available values, you can inspect the themeVariant objetc using the 'Debug View' layout. Notice the values are udpated dynamically every time you udpate the theme through the UI.","title":"Work with SharePoint theme"},{"location":"search-parts/templating/#custom-code-renderers","text":"You may also define your own renderers, which most often should be SPFx application customizers. These should use the resultservice to register themselves as renderers, and will upon registration be available as a rendering choice in the \"Result Layouts\" Section. More information about custom code renderers may be found in a separate project search-custom-renderer , which showcases such a renderer.","title":"Custom code renderers"},{"location":"search-query-enhancer/debug-locally/","text":"Prerequisites \u00b6 In VSCode, open the root folder ./functions . Install all dependencies using npm i . Install Azure CLI on youre machine. Install Azure Function Core tools globaly using npm i -g azure-functions-core-tools@2.7.1149 (version 2). In a Node.js console, build the solution using npm run build:dev cmd. For production use, execute npm run build (minified version of the JS code). In a Node.js console, from the functions/dist folder, run the following command func start . In VSCode, launch the 'Debug Local Azure Function' debug configuration Set breakpoints directly in your '.ts' files Send your requests either using Postman with the localhost address according to your settings (i.e. http://localhost:7071/api/enhanceQuery ) or directly in the 'Search Box Webpart' via the 'Service URL' parameter. For the last scenario you can use npm i -g ngrok to redirect calls to your localhost function using the following command ngrok http 7071 . Azure Function Proxy configuration \u00b6 This solution uses an Azure function proxy to get an only single endpoint URL for multiple functions. See the proxies.json file to see defined routes. How to deploy the solution to Azure ? \u00b6 Development scenario \u00b6 We recommend to use Visual Studio Code to work with this solution. In VSCode, download the Azure Function extension Sign-in to to Azure account into the extension In a Node.js console, build the application using the command npm run build (minified version) Use the \"Deploy to Function App\" feature (in the extension top bar) using the 'dist' folder. Make sure you've run the npm run build cmd before. Upload the application settings ( local.settings.json ) Production scenario with CI \u00b6 A deploy.ps1 script is available to also deploy this function into your Azure environment. From you Azure portal, create a new empty function Set the Azure_Function_Name value in the local.settings.json accordingly. Login to Azure using az login then run deploy.ps1 script with your parameters. OR If you use Azure DevOps, you can simply use the default build template and release task for Azure Functions ommiting this script. Build template Release task In both scenarios, you can test your function using Postman. If you test it using a SPFx component, don't forget to add the SharePoint domain to the CORS settings to allow this origin:","title":"Debug locally"},{"location":"search-query-enhancer/debug-locally/#prerequisites","text":"In VSCode, open the root folder ./functions . Install all dependencies using npm i . Install Azure CLI on youre machine. Install Azure Function Core tools globaly using npm i -g azure-functions-core-tools@2.7.1149 (version 2). In a Node.js console, build the solution using npm run build:dev cmd. For production use, execute npm run build (minified version of the JS code). In a Node.js console, from the functions/dist folder, run the following command func start . In VSCode, launch the 'Debug Local Azure Function' debug configuration Set breakpoints directly in your '.ts' files Send your requests either using Postman with the localhost address according to your settings (i.e. http://localhost:7071/api/enhanceQuery ) or directly in the 'Search Box Webpart' via the 'Service URL' parameter. For the last scenario you can use npm i -g ngrok to redirect calls to your localhost function using the following command ngrok http 7071 .","title":"Prerequisites"},{"location":"search-query-enhancer/debug-locally/#azure-function-proxy-configuration","text":"This solution uses an Azure function proxy to get an only single endpoint URL for multiple functions. See the proxies.json file to see defined routes.","title":"Azure Function Proxy configuration"},{"location":"search-query-enhancer/debug-locally/#how-to-deploy-the-solution-to-azure","text":"","title":"How to deploy the solution to Azure ?"},{"location":"search-query-enhancer/debug-locally/#development-scenario","text":"We recommend to use Visual Studio Code to work with this solution. In VSCode, download the Azure Function extension Sign-in to to Azure account into the extension In a Node.js console, build the application using the command npm run build (minified version) Use the \"Deploy to Function App\" feature (in the extension top bar) using the 'dist' folder. Make sure you've run the npm run build cmd before. Upload the application settings ( local.settings.json )","title":"Development scenario"},{"location":"search-query-enhancer/debug-locally/#production-scenario-with-ci","text":"A deploy.ps1 script is available to also deploy this function into your Azure environment. From you Azure portal, create a new empty function Set the Azure_Function_Name value in the local.settings.json accordingly. Login to Azure using az login then run deploy.ps1 script with your parameters. OR If you use Azure DevOps, you can simply use the default build template and release task for Azure Functions ommiting this script. Build template Release task In both scenarios, you can test your function using Postman. If you test it using a SPFx component, don't forget to add the SharePoint domain to the CORS settings to allow this origin:","title":"Production scenario with CI"},{"location":"search-query-enhancer/getting-started/","text":"Summary \u00b6 The search query enhancer function can be used in conjunction with the Query Modifier feature to alter the query before being sent to the search results Web Part. This sample demonstrates the following principles to help you with the setup: Create an Azure function using TypeScript and Webpack. The original setup was reused from this article with only few adjustments. Connect Azure Function to an SPFx component Use third party back end services like Microsoft LUIS or Text Analysis to interpret a search query and enhance it with NLP services. In this sample, the function is secured by a function code. For production use, refer to this article to protect and use it with Azure AD and SPFx. In real world scenarios, you may want add your own intents and build your enhanced search queries accordingly. Use this sample as a starter. Why LUIS instead of SharePoint search query rules? \u00b6 Easy to manage for power users .They don't have to deal with complex SharePoint concepts. With LUIS, they can manage and refine the model more easily in a friendly comprehensive interface. Real time monitoring. Power users can review utterances submitted by end users in the LUIS portal and what keywords are entered. They can add new terms as synonyms automatically from the utterances and identify new intentions more precisely. Extensible model with custom intents mapped to predefined well know SharePoint search queries. Able to plug in the Bing Spell checker automatically to correct mispeleld words and get a clean query Set up the solution \u00b6 In the www.luis.ai portal, imports new applications from the JSON files in the /luis folder. In Azure, create keys for the following Microsoft Cognitive Services: Language Understanding Bing Spell Check v7 Text Analytics Fill the following values in the local.settings.json file according to your environment: Setting Description LUIS_SubscriptionKey The key value for LUIS retrieved from the Azure portal. LUIS_AzureRegion Azure region where you created the LUIS key. Ex: ' westus '. Bing_SpellCheckApiKey The Bing Spell Check API key retrieved from the Azure portal. TextAnalytics_SubscriptionKey The key value for Text Analytics Service retrieved from the Azure portal TextAnalytics_AzureRegion Azure region where you created the Text Analytics key. Ex: ' westus '. Add keys to your LUIS applications Train and publish the LUIS applications Fill LUIS app IDs in the luismappings.json file in the functions/enhanceQuery/config/ folder according to your environment. Play with the function! Intents \u00b6 Intent Description PnP.SearchByKeywords The default intent for the search query. Used to improve free text searches for SharePoint (90% of users queries in the portal). None Needed to avoid unrelevant query such as noise words, trolling or insulting words Entities \u00b6 Entity Type Description Recognition method keyPhrase Builtin This prebuilt enity catches important keywords in the phrase. In this case, we treat these values as a \"free\" keyword which will be matched with all relevant SharePoint search managed properties. Machine Learning","title":"Getting started"},{"location":"search-query-enhancer/getting-started/#summary","text":"The search query enhancer function can be used in conjunction with the Query Modifier feature to alter the query before being sent to the search results Web Part. This sample demonstrates the following principles to help you with the setup: Create an Azure function using TypeScript and Webpack. The original setup was reused from this article with only few adjustments. Connect Azure Function to an SPFx component Use third party back end services like Microsoft LUIS or Text Analysis to interpret a search query and enhance it with NLP services. In this sample, the function is secured by a function code. For production use, refer to this article to protect and use it with Azure AD and SPFx. In real world scenarios, you may want add your own intents and build your enhanced search queries accordingly. Use this sample as a starter.","title":"Summary"},{"location":"search-query-enhancer/getting-started/#why-luis-instead-of-sharepoint-search-query-rules","text":"Easy to manage for power users .They don't have to deal with complex SharePoint concepts. With LUIS, they can manage and refine the model more easily in a friendly comprehensive interface. Real time monitoring. Power users can review utterances submitted by end users in the LUIS portal and what keywords are entered. They can add new terms as synonyms automatically from the utterances and identify new intentions more precisely. Extensible model with custom intents mapped to predefined well know SharePoint search queries. Able to plug in the Bing Spell checker automatically to correct mispeleld words and get a clean query","title":"Why LUIS instead of SharePoint search query rules?"},{"location":"search-query-enhancer/getting-started/#set-up-the-solution","text":"In the www.luis.ai portal, imports new applications from the JSON files in the /luis folder. In Azure, create keys for the following Microsoft Cognitive Services: Language Understanding Bing Spell Check v7 Text Analytics Fill the following values in the local.settings.json file according to your environment: Setting Description LUIS_SubscriptionKey The key value for LUIS retrieved from the Azure portal. LUIS_AzureRegion Azure region where you created the LUIS key. Ex: ' westus '. Bing_SpellCheckApiKey The Bing Spell Check API key retrieved from the Azure portal. TextAnalytics_SubscriptionKey The key value for Text Analytics Service retrieved from the Azure portal TextAnalytics_AzureRegion Azure region where you created the Text Analytics key. Ex: ' westus '. Add keys to your LUIS applications Train and publish the LUIS applications Fill LUIS app IDs in the luismappings.json file in the functions/enhanceQuery/config/ folder according to your environment. Play with the function!","title":"Set up the solution"},{"location":"search-query-enhancer/getting-started/#intents","text":"Intent Description PnP.SearchByKeywords The default intent for the search query. Used to improve free text searches for SharePoint (90% of users queries in the portal). None Needed to avoid unrelevant query such as noise words, trolling or insulting words","title":"Intents"},{"location":"search-query-enhancer/getting-started/#entities","text":"Entity Type Description Recognition method keyPhrase Builtin This prebuilt enity catches important keywords in the phrase. In this case, we treat these values as a \"free\" keyword which will be matched with all relevant SharePoint search managed properties. Machine Learning","title":"Entities"}]}